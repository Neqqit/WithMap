import { DOCUMENT } from '@angular/common';
import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';
import { from, fromEvent, merge, throwError } from 'rxjs';
import { map, switchMap, take } from 'rxjs/operators';
import * as i0 from "@angular/core";
/**
 * Injection token to specify configuration.
 */
export const YA_CONFIG = new InjectionToken('YA_CONFIG');
/**
 * The `YaApiLoader` service handles loading of Yandex.Maps API.
 *
 * @example
 * ```ts
 * import { YaApiLoaderService } from 'angular8-yandex-maps';
 *
 * export class AppComponent {
 *   constructor(private yaApiLoaderService: YaApiLoaderService) {
 *     this.yaApiLoaderService.load()
 *       .subscribe(v => console.log(v))
 *   }
 * }
 *```
 *
 * @dynamic
 */
export class YaApiLoaderService {
    constructor(config, _document) {
        this._document = _document;
        this._defaultConfig = { lang: 'ru_RU' };
        this._config = {
            ...this._defaultConfig,
            ...config,
        };
    }
    /**
     * Loads Yandex.Maps API.
     */
    load() {
        if (window.ymaps) {
            return from(ymaps.ready()).pipe(map(() => ymaps));
        }
        if (!this._script) {
            const script = this._document.createElement('script');
            script.type = 'text/javascript';
            script.src = this._getScriptSource(this._config);
            script.id = 'yandexMapsApiScript';
            script.async = true;
            script.defer = true;
            this._script = this._document.body.appendChild(script);
        }
        const load = fromEvent(this._script, 'load').pipe(switchMap(() => from(ymaps.ready()).pipe(map(() => ymaps))));
        const error = fromEvent(this._script, 'error').pipe(switchMap((e) => throwError(e)));
        return merge(load, error).pipe(take(1));
    }
    /**
     * Returns script source by config.
     * @param config config with parameters that will be added in source
     * @example
     * // returns 'https://api-maps.yandex.ru/2.1/?apikey=658f67a2-fd77-42e9-b99e-2bd48c4ccad4&lang=en_US'
     * getScriptSource({ apikey: '658f67a2-fd77-42e9-b99e-2bd48c4ccad4', lang: 'en_US' })
     */
    _getScriptSource(config) {
        const { enterprise, version = '2.1', ...rest } = config;
        const params = this._convertConfigIntoQueryParams(rest);
        return `https://${enterprise ? 'enterprise.' : ''}api-maps.yandex.ru/${version}/?${params}`;
    }
    /**
     * Converts a config into a query string parameters.
     * @param config object for converting
     * @example
     * // returns "lang=ru_RU&apikey=XXX"
     * convertIntoQueryParams({ lang: 'ru_RU', apikey: 'XXX' })
     */
    _convertConfigIntoQueryParams(config) {
        return Object.entries(config)
            .map(([key, value]) => `${key}=${value}`)
            .join('&');
    }
}
YaApiLoaderService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: YaApiLoaderService, deps: [{ token: YA_CONFIG, optional: true }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });
YaApiLoaderService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: YaApiLoaderService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: YaApiLoaderService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [YA_CONFIG]
                }] }, { type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieWEtYXBpLWxvYWRlci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYW5ndWxhcjgteWFuZGV4LW1hcHMvc3JjL2xpYi9zZXJ2aWNlcy95YS1hcGktbG9hZGVyL3lhLWFwaS1sb2FkZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDM0MsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsY0FBYyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RSxPQUFPLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQWMsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3RFLE9BQU8sRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxNQUFNLGdCQUFnQixDQUFDOztBQUV0RDs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRyxJQUFJLGNBQWMsQ0FBVyxXQUFXLENBQUMsQ0FBQztBQW9DbkU7Ozs7Ozs7Ozs7Ozs7Ozs7R0FnQkc7QUFJSCxNQUFNLE9BQU8sa0JBQWtCO0lBTzdCLFlBQ2lDLE1BQXVCLEVBQ25CLFNBQW1CO1FBQW5CLGNBQVMsR0FBVCxTQUFTLENBQVU7UUFOdkMsbUJBQWMsR0FBYSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsQ0FBQztRQVE1RCxJQUFJLENBQUMsT0FBTyxHQUFHO1lBQ2IsR0FBRyxJQUFJLENBQUMsY0FBYztZQUN0QixHQUFHLE1BQU07U0FDVixDQUFDO0lBQ0osQ0FBQztJQUVEOztPQUVHO0lBQ0gsSUFBSTtRQUNGLElBQUksTUFBTSxDQUFDLEtBQUssRUFBRTtZQUNoQixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7U0FDbkQ7UUFFRCxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNqQixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUV0RCxNQUFNLENBQUMsSUFBSSxHQUFHLGlCQUFpQixDQUFDO1lBQ2hDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNqRCxNQUFNLENBQUMsRUFBRSxHQUFHLHFCQUFxQixDQUFDO1lBQ2xDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1lBQ3BCLE1BQU0sQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1lBRXBCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3hEO1FBRUQsTUFBTSxJQUFJLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUMvQyxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUM1RCxDQUFDO1FBRUYsTUFBTSxLQUFLLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVyRixPQUFPLEtBQUssQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSyxnQkFBZ0IsQ0FBQyxNQUFnQjtRQUN2QyxNQUFNLEVBQUUsVUFBVSxFQUFFLE9BQU8sR0FBRyxLQUFLLEVBQUUsR0FBRyxJQUFJLEVBQUUsR0FBRyxNQUFNLENBQUM7UUFDeEQsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLDZCQUE2QixDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXhELE9BQU8sV0FBVyxVQUFVLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsRUFBRSxzQkFBc0IsT0FBTyxLQUFLLE1BQU0sRUFBRSxDQUFDO0lBQzlGLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSyw2QkFBNkIsQ0FBQyxNQUFnQjtRQUNwRCxPQUFPLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDO2FBQzFCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxFQUFFLEVBQUUsQ0FBQyxHQUFHLEdBQUcsSUFBSSxLQUFLLEVBQUUsQ0FBQzthQUN4QyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDZixDQUFDOzsrR0F2RVUsa0JBQWtCLGtCQVFQLFNBQVMsNkJBQ3JCLFFBQVE7bUhBVFAsa0JBQWtCLGNBRmpCLE1BQU07MkZBRVAsa0JBQWtCO2tCQUg5QixVQUFVO21CQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQjs7MEJBU0ksUUFBUTs7MEJBQUksTUFBTTsyQkFBQyxTQUFTOzhCQUNpQixRQUFROzBCQUFyRCxNQUFNOzJCQUFDLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBET0NVTUVOVCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUsIEluamVjdGlvblRva2VuLCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgZnJvbSwgZnJvbUV2ZW50LCBtZXJnZSwgT2JzZXJ2YWJsZSwgdGhyb3dFcnJvciB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwLCBzd2l0Y2hNYXAsIHRha2UgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbi8qKlxuICogSW5qZWN0aW9uIHRva2VuIHRvIHNwZWNpZnkgY29uZmlndXJhdGlvbi5cbiAqL1xuZXhwb3J0IGNvbnN0IFlBX0NPTkZJRyA9IG5ldyBJbmplY3Rpb25Ub2tlbjxZYUNvbmZpZz4oJ1lBX0NPTkZJRycpO1xuXG4vKipcbiAqIEFQSSBsb2FkaW5nIHBhcmFtZXRlcnMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgWWFDb25maWcge1xuICAvKipcbiAgICogQVBJIGtleS4gWW91IGNhbiBnZXQgYSBrZXkgaW4gdGhlIGRldmVsb3BlcidzIGRhc2hib2FyZC5cbiAgICovXG4gIGFwaWtleT86IHN0cmluZztcbiAgLyoqXG4gICAqIExvY2FsZS5cbiAgICovXG4gIGxhbmc/OiAncnVfUlUnIHwgJ2VuX1VTJyB8ICdlbl9SVScgfCAncnVfVUEnIHwgJ3VrX1VBJyB8ICd0cl9UUic7XG4gIC8qKlxuICAgKiBUaGUgb3JkZXIgZm9yIHNldHRpbmcgZ2VvZ3JhcGhpY2FsIGNvb3JkaW5hdGVzIGluIEFQSSBmdW5jdGlvbnMgdGhhdCBhY2NlcHQgbG9uZ2l0dWRlLWxhdGl0dWRlIGlucHV0LlxuICAgKi9cbiAgY29vcmRvcmRlcj86ICdsYXRsb25nJyB8ICdsb25nbGF0JztcbiAgLyoqXG4gICAqIExpc3Qgb2YgbW9kdWxlcyB0byBsb2FkLlxuICAgKi9cbiAgbG9hZD86IHN0cmluZztcbiAgLyoqXG4gICAqIEFQSSBsb2FkaW5nIG1vZGUuXG4gICAqL1xuICBtb2RlPzogJ3JlbGVhc2UnIHwgJ2RlYnVnJztcbiAgLyoqXG4gICAqIFVzZSBjb21tZXJjaWFsIHZlcnNpb24gb2YgdGhlIEFQSS5cbiAgICovXG4gIGVudGVycHJpc2U/OiBib29sZWFuO1xuICAvKipcbiAgICogVmVyc2lvbiBudW1iZXIgb2YgdGhlIEFQSS5cbiAgICovXG4gIHZlcnNpb24/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogVGhlIGBZYUFwaUxvYWRlcmAgc2VydmljZSBoYW5kbGVzIGxvYWRpbmcgb2YgWWFuZGV4Lk1hcHMgQVBJLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0c1xuICogaW1wb3J0IHsgWWFBcGlMb2FkZXJTZXJ2aWNlIH0gZnJvbSAnYW5ndWxhcjgteWFuZGV4LW1hcHMnO1xuICpcbiAqIGV4cG9ydCBjbGFzcyBBcHBDb21wb25lbnQge1xuICogICBjb25zdHJ1Y3Rvcihwcml2YXRlIHlhQXBpTG9hZGVyU2VydmljZTogWWFBcGlMb2FkZXJTZXJ2aWNlKSB7XG4gKiAgICAgdGhpcy55YUFwaUxvYWRlclNlcnZpY2UubG9hZCgpXG4gKiAgICAgICAuc3Vic2NyaWJlKHYgPT4gY29uc29sZS5sb2codikpXG4gKiAgIH1cbiAqIH1cbiAqYGBgXG4gKlxuICogQGR5bmFtaWNcbiAqL1xuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIFlhQXBpTG9hZGVyU2VydmljZSB7XG4gIHByaXZhdGUgcmVhZG9ubHkgX2NvbmZpZzogWWFDb25maWc7XG5cbiAgcHJpdmF0ZSByZWFkb25seSBfZGVmYXVsdENvbmZpZzogWWFDb25maWcgPSB7IGxhbmc6ICdydV9SVScgfTtcblxuICBwcml2YXRlIF9zY3JpcHQ6IEhUTUxTY3JpcHRFbGVtZW50O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBPcHRpb25hbCgpIEBJbmplY3QoWUFfQ09ORklHKSBjb25maWc6IFlhQ29uZmlnIHwgbnVsbCxcbiAgICBASW5qZWN0KERPQ1VNRU5UKSBwcml2YXRlIHJlYWRvbmx5IF9kb2N1bWVudDogRG9jdW1lbnQsXG4gICkge1xuICAgIHRoaXMuX2NvbmZpZyA9IHtcbiAgICAgIC4uLnRoaXMuX2RlZmF1bHRDb25maWcsXG4gICAgICAuLi5jb25maWcsXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMb2FkcyBZYW5kZXguTWFwcyBBUEkuXG4gICAqL1xuICBsb2FkKCk6IE9ic2VydmFibGU8dHlwZW9mIHltYXBzPiB7XG4gICAgaWYgKHdpbmRvdy55bWFwcykge1xuICAgICAgcmV0dXJuIGZyb20oeW1hcHMucmVhZHkoKSkucGlwZShtYXAoKCkgPT4geW1hcHMpKTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuX3NjcmlwdCkge1xuICAgICAgY29uc3Qgc2NyaXB0ID0gdGhpcy5fZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG5cbiAgICAgIHNjcmlwdC50eXBlID0gJ3RleHQvamF2YXNjcmlwdCc7XG4gICAgICBzY3JpcHQuc3JjID0gdGhpcy5fZ2V0U2NyaXB0U291cmNlKHRoaXMuX2NvbmZpZyk7XG4gICAgICBzY3JpcHQuaWQgPSAneWFuZGV4TWFwc0FwaVNjcmlwdCc7XG4gICAgICBzY3JpcHQuYXN5bmMgPSB0cnVlO1xuICAgICAgc2NyaXB0LmRlZmVyID0gdHJ1ZTtcblxuICAgICAgdGhpcy5fc2NyaXB0ID0gdGhpcy5fZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICAgIH1cblxuICAgIGNvbnN0IGxvYWQgPSBmcm9tRXZlbnQodGhpcy5fc2NyaXB0LCAnbG9hZCcpLnBpcGUoXG4gICAgICBzd2l0Y2hNYXAoKCkgPT4gZnJvbSh5bWFwcy5yZWFkeSgpKS5waXBlKG1hcCgoKSA9PiB5bWFwcykpKSxcbiAgICApO1xuXG4gICAgY29uc3QgZXJyb3IgPSBmcm9tRXZlbnQodGhpcy5fc2NyaXB0LCAnZXJyb3InKS5waXBlKHN3aXRjaE1hcCgoZSkgPT4gdGhyb3dFcnJvcihlKSkpO1xuXG4gICAgcmV0dXJuIG1lcmdlKGxvYWQsIGVycm9yKS5waXBlKHRha2UoMSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgc2NyaXB0IHNvdXJjZSBieSBjb25maWcuXG4gICAqIEBwYXJhbSBjb25maWcgY29uZmlnIHdpdGggcGFyYW1ldGVycyB0aGF0IHdpbGwgYmUgYWRkZWQgaW4gc291cmNlXG4gICAqIEBleGFtcGxlXG4gICAqIC8vIHJldHVybnMgJ2h0dHBzOi8vYXBpLW1hcHMueWFuZGV4LnJ1LzIuMS8/YXBpa2V5PTY1OGY2N2EyLWZkNzctNDJlOS1iOTllLTJiZDQ4YzRjY2FkNCZsYW5nPWVuX1VTJ1xuICAgKiBnZXRTY3JpcHRTb3VyY2UoeyBhcGlrZXk6ICc2NThmNjdhMi1mZDc3LTQyZTktYjk5ZS0yYmQ0OGM0Y2NhZDQnLCBsYW5nOiAnZW5fVVMnIH0pXG4gICAqL1xuICBwcml2YXRlIF9nZXRTY3JpcHRTb3VyY2UoY29uZmlnOiBZYUNvbmZpZyk6IHN0cmluZyB7XG4gICAgY29uc3QgeyBlbnRlcnByaXNlLCB2ZXJzaW9uID0gJzIuMScsIC4uLnJlc3QgfSA9IGNvbmZpZztcbiAgICBjb25zdCBwYXJhbXMgPSB0aGlzLl9jb252ZXJ0Q29uZmlnSW50b1F1ZXJ5UGFyYW1zKHJlc3QpO1xuXG4gICAgcmV0dXJuIGBodHRwczovLyR7ZW50ZXJwcmlzZSA/ICdlbnRlcnByaXNlLicgOiAnJ31hcGktbWFwcy55YW5kZXgucnUvJHt2ZXJzaW9ufS8/JHtwYXJhbXN9YDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBhIGNvbmZpZyBpbnRvIGEgcXVlcnkgc3RyaW5nIHBhcmFtZXRlcnMuXG4gICAqIEBwYXJhbSBjb25maWcgb2JqZWN0IGZvciBjb252ZXJ0aW5nXG4gICAqIEBleGFtcGxlXG4gICAqIC8vIHJldHVybnMgXCJsYW5nPXJ1X1JVJmFwaWtleT1YWFhcIlxuICAgKiBjb252ZXJ0SW50b1F1ZXJ5UGFyYW1zKHsgbGFuZzogJ3J1X1JVJywgYXBpa2V5OiAnWFhYJyB9KVxuICAgKi9cbiAgcHJpdmF0ZSBfY29udmVydENvbmZpZ0ludG9RdWVyeVBhcmFtcyhjb25maWc6IFlhQ29uZmlnKTogc3RyaW5nIHtcbiAgICByZXR1cm4gT2JqZWN0LmVudHJpZXMoY29uZmlnKVxuICAgICAgLm1hcCgoW2tleSwgdmFsdWVdKSA9PiBgJHtrZXl9PSR7dmFsdWV9YClcbiAgICAgIC5qb2luKCcmJyk7XG4gIH1cbn1cbiJdfQ==