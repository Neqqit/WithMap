import { Directive, EventEmitter, Input, Output, } from '@angular/core';
import { Subscription } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "../ya-map/ya-map.component";
/**
 * The `ya-control` component wraps `ymaps.control[YaControlType]` classes from the Yandex.Maps API.
 * You can configure `ymaps.control[YaControlType]` via the component's inputs.
 * API Events can be bound only manually. You can use `ready` event to get an instance.
 *
 * <example-url>https://stackblitz.com/edit/searchcontrol?embed=1</example-url>
 *
 * @example
 * ```html
 * <ya-map [center]="[55.761952, 37.620739]">
 *   <ya-control
 *     type="RoutePanel"
 *     [parameters]="{ options: { float: 'right' } }"
 *   ></ya-control>
 * </ya-map>
 * ```
 */
export class YaControlDirective {
    constructor(_ngZone, _yaMapComponent) {
        this._ngZone = _ngZone;
        this._yaMapComponent = _yaMapComponent;
        this._sub = new Subscription();
        /**
         * Control instance is added in a Map.
         */
        this.ready = new EventEmitter();
    }
    ngOnChanges() {
        if (this._control) {
            console.warn('Control does not support dynamic configuration. You can config it manually using ymaps or recreate the component with new configuration');
        }
    }
    ngOnInit() {
        if (this._yaMapComponent.isBrowser) {
            const sub = this._yaMapComponent.map$.subscribe((map) => {
                if (map) {
                    const control = new ymaps.control[this.type](this.parameters);
                    this._control = control;
                    /**
                     * RoutePanel ignores state in parameters. API bug
                     */
                    if (control instanceof ymaps.control.RoutePanel &&
                        this.parameters &&
                        this.parameters.state) {
                        control.routePanel.state.set({ ...this.parameters.state });
                    }
                    map.controls.add(control);
                    this._ngZone.run(() => this.ready.emit({ ymaps, target: control }));
                }
            });
            this._sub.add(sub);
        }
    }
    ngOnDestroy() {
        if (this._control) {
            this._yaMapComponent?.map$.value?.controls.remove(this._control);
        }
    }
}
YaControlDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: YaControlDirective, deps: [{ token: i0.NgZone }, { token: i1.YaMapComponent }], target: i0.ɵɵFactoryTarget.Directive });
YaControlDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.2", type: YaControlDirective, selector: "ya-control", inputs: { type: "type", parameters: "parameters" }, outputs: { ready: "ready" }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: YaControlDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ya-control',
                }]
        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i1.YaMapComponent }]; }, propDecorators: { type: [{
                type: Input
            }], parameters: [{
                type: Input
            }], ready: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieWEtY29udHJvbC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hbmd1bGFyOC15YW5kZXgtbWFwcy9zcmMvbGliL2NvbXBvbmVudHMveWEtY29udHJvbC95YS1jb250cm9sLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFlBQVksRUFDWixLQUFLLEVBS0wsTUFBTSxHQUNQLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxNQUFNLENBQUM7OztBQXNCcEM7Ozs7Ozs7Ozs7Ozs7Ozs7R0FnQkc7QUFJSCxNQUFNLE9BQU8sa0JBQWtCO0lBb0I3QixZQUE2QixPQUFlLEVBQW1CLGVBQStCO1FBQWpFLFlBQU8sR0FBUCxPQUFPLENBQVE7UUFBbUIsb0JBQWUsR0FBZixlQUFlLENBQWdCO1FBbkI3RSxTQUFJLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQWMzQzs7V0FFRztRQUNPLFVBQUssR0FBb0MsSUFBSSxZQUFZLEVBQXFCLENBQUM7SUFFUSxDQUFDO0lBRWxHLFdBQVc7UUFDVCxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDakIsT0FBTyxDQUFDLElBQUksQ0FDVix5SUFBeUksQ0FDMUksQ0FBQztTQUNIO0lBQ0gsQ0FBQztJQUVELFFBQVE7UUFDTixJQUFJLElBQUksQ0FBQyxlQUFlLENBQUMsU0FBUyxFQUFFO1lBQ2xDLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO2dCQUN0RCxJQUFJLEdBQUcsRUFBRTtvQkFDUCxNQUFNLE9BQU8sR0FBRyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztvQkFDOUQsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUM7b0JBRXhCOzt1QkFFRztvQkFDSCxJQUNFLE9BQU8sWUFBWSxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQVU7d0JBQzNDLElBQUksQ0FBQyxVQUFVO3dCQUNmLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUNyQjt3QkFDQSxPQUFPLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztxQkFDNUQ7b0JBRUQsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7b0JBQzFCLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUM7aUJBQ3JFO1lBQ0gsQ0FBQyxDQUFDLENBQUM7WUFFSCxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUNwQjtJQUNILENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2pCLElBQUksQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUNsRTtJQUNILENBQUM7OytHQTdEVSxrQkFBa0I7bUdBQWxCLGtCQUFrQjsyRkFBbEIsa0JBQWtCO2tCQUg5QixTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxZQUFZO2lCQUN2QjswSEFTVSxJQUFJO3NCQUFaLEtBQUs7Z0JBS0csVUFBVTtzQkFBbEIsS0FBSztnQkFLSSxLQUFLO3NCQUFkLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBEaXJlY3RpdmUsXG4gIEV2ZW50RW1pdHRlcixcbiAgSW5wdXQsXG4gIE5nWm9uZSxcbiAgT25DaGFuZ2VzLFxuICBPbkRlc3Ryb3ksXG4gIE9uSW5pdCxcbiAgT3V0cHV0LFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgWWFNYXBDb21wb25lbnQgfSBmcm9tICcuLi95YS1tYXAveWEtbWFwLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBZYVJlYWR5RXZlbnQgfSBmcm9tICcuLi8uLi90eXBpbmdzL3lhLXJlYWR5LWV2ZW50JztcblxuLyoqXG4gKiBDb250cm9sIHR5cGVzLlxuICovXG5leHBvcnQgdHlwZSBZYUNvbnRyb2xUeXBlID1cbiAgfCAnQnV0dG9uJ1xuICB8ICdGdWxsc2NyZWVuQ29udHJvbCdcbiAgfCAnR2VvbG9jYXRpb25Db250cm9sJ1xuICB8ICdMaXN0Qm94J1xuICB8ICdMaXN0Qm94SXRlbSdcbiAgfCAnUm91dGVCdXR0b24nXG4gIHwgJ1JvdXRlRWRpdG9yJ1xuICB8ICdSb3V0ZVBhbmVsJ1xuICB8ICdSdWxlckNvbnRyb2wnXG4gIHwgJ1NlYXJjaENvbnRyb2wnXG4gIHwgJ1RyYWZmaWNDb250cm9sJ1xuICB8ICdUeXBlU2VsZWN0b3InXG4gIHwgJ1pvb21Db250cm9sJztcblxuLyoqXG4gKiBUaGUgYHlhLWNvbnRyb2xgIGNvbXBvbmVudCB3cmFwcyBgeW1hcHMuY29udHJvbFtZYUNvbnRyb2xUeXBlXWAgY2xhc3NlcyBmcm9tIHRoZSBZYW5kZXguTWFwcyBBUEkuXG4gKiBZb3UgY2FuIGNvbmZpZ3VyZSBgeW1hcHMuY29udHJvbFtZYUNvbnRyb2xUeXBlXWAgdmlhIHRoZSBjb21wb25lbnQncyBpbnB1dHMuXG4gKiBBUEkgRXZlbnRzIGNhbiBiZSBib3VuZCBvbmx5IG1hbnVhbGx5LiBZb3UgY2FuIHVzZSBgcmVhZHlgIGV2ZW50IHRvIGdldCBhbiBpbnN0YW5jZS5cbiAqXG4gKiA8ZXhhbXBsZS11cmw+aHR0cHM6Ly9zdGFja2JsaXR6LmNvbS9lZGl0L3NlYXJjaGNvbnRyb2w/ZW1iZWQ9MTwvZXhhbXBsZS11cmw+XG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGh0bWxcbiAqIDx5YS1tYXAgW2NlbnRlcl09XCJbNTUuNzYxOTUyLCAzNy42MjA3MzldXCI+XG4gKiAgIDx5YS1jb250cm9sXG4gKiAgICAgdHlwZT1cIlJvdXRlUGFuZWxcIlxuICogICAgIFtwYXJhbWV0ZXJzXT1cInsgb3B0aW9uczogeyBmbG9hdDogJ3JpZ2h0JyB9IH1cIlxuICogICA+PC95YS1jb250cm9sPlxuICogPC95YS1tYXA+XG4gKiBgYGBcbiAqL1xuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAneWEtY29udHJvbCcsXG59KVxuZXhwb3J0IGNsYXNzIFlhQ29udHJvbERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xuICBwcml2YXRlIHJlYWRvbmx5IF9zdWIgPSBuZXcgU3Vic2NyaXB0aW9uKCk7XG5cbiAgcHJpdmF0ZSBfY29udHJvbD86IGFueTtcblxuICAvKipcbiAgICogQ29udHJvbCB0eXBlLlxuICAgKi9cbiAgQElucHV0KCkgdHlwZTogWWFDb250cm9sVHlwZTtcblxuICAvKipcbiAgICogUGFyYW1ldGVycyBmb3IgdGhlIENvbnRyb2wuXG4gICAqL1xuICBASW5wdXQoKSBwYXJhbWV0ZXJzOiBhbnk7XG5cbiAgLyoqXG4gICAqIENvbnRyb2wgaW5zdGFuY2UgaXMgYWRkZWQgaW4gYSBNYXAuXG4gICAqL1xuICBAT3V0cHV0KCkgcmVhZHk6IEV2ZW50RW1pdHRlcjxZYVJlYWR5RXZlbnQ8YW55Pj4gPSBuZXcgRXZlbnRFbWl0dGVyPFlhUmVhZHlFdmVudDxhbnk+PigpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgX25nWm9uZTogTmdab25lLCBwcml2YXRlIHJlYWRvbmx5IF95YU1hcENvbXBvbmVudDogWWFNYXBDb21wb25lbnQpIHt9XG5cbiAgbmdPbkNoYW5nZXMoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX2NvbnRyb2wpIHtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgJ0NvbnRyb2wgZG9lcyBub3Qgc3VwcG9ydCBkeW5hbWljIGNvbmZpZ3VyYXRpb24uIFlvdSBjYW4gY29uZmlnIGl0IG1hbnVhbGx5IHVzaW5nIHltYXBzIG9yIHJlY3JlYXRlIHRoZSBjb21wb25lbnQgd2l0aCBuZXcgY29uZmlndXJhdGlvbicsXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIGlmICh0aGlzLl95YU1hcENvbXBvbmVudC5pc0Jyb3dzZXIpIHtcbiAgICAgIGNvbnN0IHN1YiA9IHRoaXMuX3lhTWFwQ29tcG9uZW50Lm1hcCQuc3Vic2NyaWJlKChtYXApID0+IHtcbiAgICAgICAgaWYgKG1hcCkge1xuICAgICAgICAgIGNvbnN0IGNvbnRyb2wgPSBuZXcgeW1hcHMuY29udHJvbFt0aGlzLnR5cGVdKHRoaXMucGFyYW1ldGVycyk7XG4gICAgICAgICAgdGhpcy5fY29udHJvbCA9IGNvbnRyb2w7XG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBSb3V0ZVBhbmVsIGlnbm9yZXMgc3RhdGUgaW4gcGFyYW1ldGVycy4gQVBJIGJ1Z1xuICAgICAgICAgICAqL1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIGNvbnRyb2wgaW5zdGFuY2VvZiB5bWFwcy5jb250cm9sLlJvdXRlUGFuZWwgJiZcbiAgICAgICAgICAgIHRoaXMucGFyYW1ldGVycyAmJlxuICAgICAgICAgICAgdGhpcy5wYXJhbWV0ZXJzLnN0YXRlXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBjb250cm9sLnJvdXRlUGFuZWwuc3RhdGUuc2V0KHsgLi4udGhpcy5wYXJhbWV0ZXJzLnN0YXRlIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG1hcC5jb250cm9scy5hZGQoY29udHJvbCk7XG4gICAgICAgICAgdGhpcy5fbmdab25lLnJ1bigoKSA9PiB0aGlzLnJlYWR5LmVtaXQoeyB5bWFwcywgdGFyZ2V0OiBjb250cm9sIH0pKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuX3N1Yi5hZGQoc3ViKTtcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fY29udHJvbCkge1xuICAgICAgdGhpcy5feWFNYXBDb21wb25lbnQ/Lm1hcCQudmFsdWU/LmNvbnRyb2xzLnJlbW92ZSh0aGlzLl9jb250cm9sKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==