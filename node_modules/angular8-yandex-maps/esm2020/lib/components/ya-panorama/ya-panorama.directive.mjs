import { Directive, EventEmitter, Input, Output, } from '@angular/core';
import { from, Subscription } from 'rxjs';
import { filter, map, switchMap } from 'rxjs/operators';
import { EventManager } from '../../event-manager';
import * as i0 from "@angular/core";
import * as i1 from "../ya-map/ya-map.component";
/**
 * The `ya-panorama` component wraps `ymaps.panorama.Player` class from the Yandex.Maps API.
 * You can configure it via the component's inputs.
 * Events can be bound using the outputs of the component.
 *
 * <example-url>https://stackblitz.com/edit/panorama?embed=1</example-url>
 *
 * @example
 * ```html
 * <ya-map>
 *   <ya-panorama [point]="[59.938557, 30.316198]" layer="yandex#airPanorama"></ya-panorama>
 * </ya-map>
 * ```
 */
export class YaPanoramaDirective {
    constructor(_ngZone, _yaMapComponent) {
        this._ngZone = _ngZone;
        this._yaMapComponent = _yaMapComponent;
        this._sub = new Subscription();
        this._eventManager = new EventManager(this._ngZone);
        /**
         * Panorama instance is created.
         */
        this.ready = new EventEmitter();
        /**
         * The player was closed by the user or destroyed using the panorama.Player.destroy method.
         */
        this.destroy = this._eventManager.getLazyEmitter('destroy');
        /**
         * The view direction changed.
         */
        this.directionchange = this._eventManager.getLazyEmitter('directionchange');
        /**
         * An error occurred during operation of the player. The user will be shown the appropriate screen.
         */
        this.yaerror = this._eventManager.getLazyEmitter('error');
        /**
         * The panorama player switched to full-screen mode.
         */
        this.fullscreenenter = this._eventManager.getLazyEmitter('fullscreenenter');
        /**
         * The panorama player exited full-screen mode.
         */
        this.fullscreenexit = this._eventManager.getLazyEmitter('fullscreenexit');
        /**
         * The user clicked on an expanded marker.
         */
        this.markercollapse = this._eventManager.getLazyEmitter('markercollapse');
        /**
         * The user clicked on a collapsed marker.
         */
        this.markerexpand = this._eventManager.getLazyEmitter('markerexpand');
        /**
         * The user's cursor hovered over a marker.
         */
        this.markermouseenter = this._eventManager.getLazyEmitter('markermouseenter');
        /**
         * The user's cursor left a marker.
         */
        this.markermouseleave = this._eventManager.getLazyEmitter('markermouseleave');
        /**
         * The open panorama changed.
         */
        this.panoramachange = this._eventManager.getLazyEmitter('panoramachange');
        /**
         * The size of the viewport has been changed.
         */
        this.spanchange = this._eventManager.getLazyEmitter('spanchange');
    }
    /**
     * Handles input changes and passes them in API.
     * @param changes
     */
    ngOnChanges(changes) {
        const player = this._player;
        if (player) {
            const { point, layer, options } = changes;
            /**
             * player.moveTo resets values to default if any of them isn't passed.
             * That's why we use value from currentValue OR previous value from input.
             * With that logic it's possible to pass only point, layer or options.
             */
            if (point || layer) {
                const combinedPoint = point?.currentValue || this.point;
                const combinedLayer = layer?.currentValue || this.layer;
                player.moveTo(combinedPoint, { layer: combinedLayer });
            }
            if (options) {
                this._setOptions(options.currentValue, player);
            }
        }
    }
    ngOnInit() {
        if (this._yaMapComponent.isBrowser) {
            const panorama$ = this._yaMapComponent.map$.pipe(filter((m) => Boolean(m)), switchMap((m) => {
                /**
                 * Map and panorama use the same container, so need to destroy/remove map
                 */
                m.destroy();
                return this._createPanorama();
            }));
            const sub = panorama$.subscribe((panorama) => {
                const { id } = this._yaMapComponent.container.nativeElement;
                const player = new ymaps.panorama.Player(id, panorama, this.options);
                this._player = player;
                this._eventManager.setTarget(player);
                this._ngZone.run(() => this.ready.emit({ ymaps, target: player }));
            });
            this._sub.add(sub);
        }
    }
    ngOnDestroy() {
        this._eventManager.destroy();
        this._sub.unsubscribe();
    }
    /**
     * Destructs state and passes it in API.
     * @param options
     * @param player
     */
    _setOptions(options, player) {
        const { autoFitToViewport, controls, direction, hotkeysEnabled, span, scrollZoomBehavior, suppressMapOpenBlock, } = options;
        if (autoFitToViewport ||
            controls ||
            hotkeysEnabled ||
            scrollZoomBehavior ||
            suppressMapOpenBlock) {
            console.warn('Only direction and span can be set after entity init. To set other options, you should recreate a Panorama with new options');
        }
        if (direction) {
            player.setDirection(direction);
        }
        if (span) {
            player.setSpan(span);
        }
    }
    /**
     * Searches for a panorama and returns first
     */
    _createPanorama() {
        return from(ymaps.panorama.locate(this.point, { layer: this.layer })).pipe(map((panoramas) => panoramas[0]));
    }
}
YaPanoramaDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: YaPanoramaDirective, deps: [{ token: i0.NgZone }, { token: i1.YaMapComponent }], target: i0.ɵɵFactoryTarget.Directive });
YaPanoramaDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.2", type: YaPanoramaDirective, selector: "ya-panorama", inputs: { point: "point", layer: "layer", options: "options" }, outputs: { ready: "ready", destroy: "destroy", directionchange: "directionchange", yaerror: "yaerror", fullscreenenter: "fullscreenenter", fullscreenexit: "fullscreenexit", markercollapse: "markercollapse", markerexpand: "markerexpand", markermouseenter: "markermouseenter", markermouseleave: "markermouseleave", panoramachange: "panoramachange", spanchange: "spanchange" }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: YaPanoramaDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ya-panorama',
                }]
        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i1.YaMapComponent }]; }, propDecorators: { point: [{
                type: Input
            }], layer: [{
                type: Input
            }], options: [{
                type: Input
            }], ready: [{
                type: Output
            }], destroy: [{
                type: Output
            }], directionchange: [{
                type: Output
            }], yaerror: [{
                type: Output
            }], fullscreenenter: [{
                type: Output
            }], fullscreenexit: [{
                type: Output
            }], markercollapse: [{
                type: Output
            }], markerexpand: [{
                type: Output
            }], markermouseenter: [{
                type: Output
            }], markermouseleave: [{
                type: Output
            }], panoramachange: [{
                type: Output
            }], spanchange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,