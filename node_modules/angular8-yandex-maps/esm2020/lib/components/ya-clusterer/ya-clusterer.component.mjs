import { ChangeDetectionStrategy, Component, ContentChildren, EventEmitter, Input, Output, } from '@angular/core';
import { Subscription } from 'rxjs';
import { YaGeoObjectDirective } from '../ya-geoobject/ya-geoobject.directive';
import { YaPlacemarkDirective } from '../ya-placemark/ya-placemark.directive';
import { EventManager } from '../../event-manager';
import * as i0 from "@angular/core";
import * as i1 from "../ya-map/ya-map.component";
/**
 * The `ya-clusterer` component wraps `ymaps.Clusterer` class from the Yandex.Maps API.
 * You can configure it via the component's inputs.
 * Events can be bound using the outputs of the component.
 *
 * <example-url>https://stackblitz.com/edit/placemark-clusterer?embed=1</example-url>
 *
 * @example
 * ```html
 * <ya-map [center]="[55.761952, 37.620739]">
 *   <ya-clusterer [options]="{ minClusterSize: 5 }">
 *     <ya-placemark [geometry]="[55.74, 37.5]"></ya-placemark>
 *     <ya-placemark [geometry]="[55.64, 37.46]"></ya-placemark>
 *     <ya-placemark [geometry]="[55.75, 37.38]"></ya-placemark>
 *
 *     <ya-geoobject
 *       [feature]="{ geometry: { type: 'Point', coordinates: [55.81, 37.4] } }"
 *      ></ya-geoobject>
 *
 *     <ya-geoobject
 *       [feature]="{ geometry: { type: 'Point', coordinates: [55.7, 37.39] } }"
 *      ></ya-geoobject>
 *   </ya-clusterer>
 * </ya-map>
 * ```
 */
export class YaClustererComponent {
    constructor(_ngZone, _yaMapComponent) {
        this._ngZone = _ngZone;
        this._yaMapComponent = _yaMapComponent;
        this._sub = new Subscription();
        this._eventManager = new EventManager(this._ngZone);
        /**
         * Clusterer instance is added in a Map.
         */
        this.ready = new EventEmitter();
        /**
         * Closing the hint.
         */
        this.hintclose = this._eventManager.getLazyEmitter('hintclose');
        /**
         * Opening a hint on a map.
         */
        this.hintopen = this._eventManager.getLazyEmitter('hintopen');
        /**
         * Map reference changed.
         */
        this.mapchange = this._eventManager.getLazyEmitter('mapchange');
        /**
         * Change to the object options.
         */
        this.optionschange = this._eventManager.getLazyEmitter('optionschange');
        /**
         * The parent object reference changed.
         */
        this.parentchange = this._eventManager.getLazyEmitter('parentchange');
    }
    /**
     * Handles input changes and passes them in API.
     * @param changes
     */
    ngOnChanges(changes) {
        const clusterer = this._clusterer;
        if (clusterer) {
            const { options } = changes;
            if (options) {
                clusterer.options.set(options.currentValue);
            }
        }
    }
    ngAfterContentInit() {
        if (this._yaMapComponent.isBrowser) {
            const sub = this._yaMapComponent.map$.subscribe((map) => {
                if (map) {
                    const clusterer = this._createClusterer();
                    this._clusterer = clusterer;
                    map.geoObjects.add(clusterer);
                    this._eventManager.setTarget(clusterer);
                    this._watchForContentChanges(clusterer);
                    this._ngZone.run(() => this.ready.emit({ ymaps, target: clusterer }));
                }
            });
            this._sub.add(sub);
        }
    }
    ngOnDestroy() {
        this._eventManager.destroy();
        this._sub.unsubscribe();
    }
    /**
     * Creates Clusterer.
     */
    _createClusterer() {
        return new ymaps.Clusterer(this.options);
    }
    _watchForContentChanges(clusterer) {
        /**
         * Adds new Placemarks to the clusterer on changes.
         */
        const currentPlacemarks = new Set();
        this._getInternalPlacemarks(this._placemarks.toArray()).forEach((placemark) => {
            currentPlacemarks.add(placemark);
            clusterer.add(placemark);
        });
        const placemarksSub = this._placemarks.changes.subscribe((placemarkDirectives) => {
            const newPlacemarks = new Set(this._getInternalPlacemarks(placemarkDirectives));
            const difference = this._getDifference(newPlacemarks, currentPlacemarks);
            clusterer.add(difference.toAdd);
            clusterer.remove(difference.toRemove);
        });
        this._sub.add(placemarksSub);
        /**
         * Adds new GeoObjects to the clusterer on changes.
         */
        const currentGeoObjects = new Set();
        this._getInternalGeoObjects(this._geoObjects.toArray()).forEach((geoObject) => {
            currentGeoObjects.add(geoObject);
            clusterer.add(geoObject);
        });
        const geoObjectsSub = this._geoObjects.changes.subscribe((geoObjectDirectives) => {
            const newGeoObjects = new Set(this._getInternalGeoObjects(geoObjectDirectives));
            const difference = this._getDifference(newGeoObjects, currentGeoObjects);
            clusterer.add(difference.toAdd);
            clusterer.remove(difference.toRemove);
        });
        this._sub.add(geoObjectsSub);
    }
    /**
     * Determines what should be added/removed in current set to equal new set
     *
     * @param newSet
     * @param currentSet
     */
    _getDifference(newSet, currentSet) {
        const toAdd = [];
        const toRemove = [];
        newSet.forEach((component) => {
            if (!currentSet.has(component)) {
                toAdd.push(component);
                currentSet.add(component);
            }
        });
        currentSet.forEach((component) => {
            if (!newSet.has(component)) {
                toRemove.push(component);
                currentSet.delete(component);
            }
        });
        return {
            toAdd,
            toRemove,
        };
    }
    _getInternalPlacemarks(placemarks) {
        return placemarks
            .filter((component) => !!component.placemark)
            .map((component) => component.placemark);
    }
    _getInternalGeoObjects(geoObjects) {
        return geoObjects
            .filter((component) => !!component.geoObject)
            .map((component) => component.geoObject);
    }
}
YaClustererComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: YaClustererComponent, deps: [{ token: i0.NgZone }, { token: i1.YaMapComponent }], target: i0.ɵɵFactoryTarget.Component });
YaClustererComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: YaClustererComponent, selector: "ya-clusterer", inputs: { options: "options" }, outputs: { ready: "ready", hintclose: "hintclose", hintopen: "hintopen", mapchange: "mapchange", optionschange: "optionschange", parentchange: "parentchange" }, queries: [{ propertyName: "_placemarks", predicate: YaPlacemarkDirective }, { propertyName: "_geoObjects", predicate: YaGeoObjectDirective }], usesOnChanges: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: YaClustererComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'ya-clusterer',
                    template: '<ng-content></ng-content>',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i1.YaMapComponent }]; }, propDecorators: { _placemarks: [{
                type: ContentChildren,
                args: [YaPlacemarkDirective]
            }], _geoObjects: [{
                type: ContentChildren,
                args: [YaGeoObjectDirective]
            }], options: [{
                type: Input
            }], ready: [{
                type: Output
            }], hintclose: [{
                type: Output
            }], hintopen: [{
                type: Output
            }], mapchange: [{
                type: Output
            }], optionschange: [{
                type: Output
            }], parentchange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,