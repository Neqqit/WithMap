/**
 * Copied from angular/components/google-maps and edited for Yandex.Maps API.
 * {@link https://github.com/angular/components/blob/master/src/google-maps/map-event-manager.ts}
 */
import { BehaviorSubject, Observable } from 'rxjs';
import { switchMap } from 'rxjs/operators';
/**
 * Manages event on a Yandex.Maps object, ensuring that events are added only when necessary.
 * @internal
 */
export class EventManager {
    constructor(_ngZone) {
        this._ngZone = _ngZone;
        /**
         * Listeners that were added before the target was set.
         */
        this._pending = [];
        this._listeners = [];
        this._targetStream = new BehaviorSubject(undefined);
    }
    /**
     * Gets an observable that adds an event listener to the map when a consumer subscribes to it.
     * @param name
     */
    getLazyEmitter(name) {
        return this._targetStream.pipe(switchMap((target) => {
            const observable = new Observable((observer) => {
                // If the target hasn't been initialized yet, cache the observer so it can be added later.
                if (!target) {
                    this._pending.push({ observable, observer });
                    return undefined;
                }
                const callback = (event) => {
                    const e = {
                        event,
                        target,
                        ymaps,
                    };
                    this._ngZone.run(() => observer.next(e));
                };
                const listener = target.events.add(name, callback);
                this._listeners.push({ name, callback, manager: listener });
                // Unsubscribe function
                return () => listener.remove(name, callback);
            });
            return observable;
        }));
    }
    /**
     * Sets the current target that the manager should bind events to.
     * @param target
     */
    setTarget(target) {
        const currentTarget = this._targetStream.value;
        if (target === currentTarget) {
            return;
        }
        // Clear the listeners from the pre-existing target.
        if (currentTarget) {
            this._clearListeners();
            this._pending = [];
        }
        this._targetStream.next(target);
        // Add the listeners that were bound before the map was initialized.
        this._pending.forEach((subscriber) => subscriber.observable.subscribe(subscriber.observer));
        this._pending = [];
    }
    /**
     * Destroys the manager and clears the event listeners.
     */
    destroy() {
        this._clearListeners();
        this._pending = [];
        this._targetStream.complete();
    }
    /**
     * Clears all currently-registered event listeners.
     */
    _clearListeners() {
        this._listeners.forEach((listener) => {
            const { name, callback, manager } = listener;
            manager.remove(name, callback);
        });
        this._listeners = [];
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnQtbWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXI4LXlhbmRleC1tYXBzL3NyYy9saWIvZXZlbnQtbWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7QUFHSCxPQUFPLEVBQUUsZUFBZSxFQUFFLFVBQVUsRUFBYyxNQUFNLE1BQU0sQ0FBQztBQUMvRCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFVM0M7OztHQUdHO0FBQ0gsTUFBTSxPQUFPLFlBQVk7SUFpQnZCLFlBQTZCLE9BQWU7UUFBZixZQUFPLEdBQVAsT0FBTyxDQUFRO1FBaEI1Qzs7V0FFRztRQUNLLGFBQVEsR0FHVixFQUFFLENBQUM7UUFFRCxlQUFVLEdBSVosRUFBRSxDQUFDO1FBRVEsa0JBQWEsR0FBRyxJQUFJLGVBQWUsQ0FBaUMsU0FBUyxDQUFDLENBQUM7SUFFakQsQ0FBQztJQUVoRDs7O09BR0c7SUFDSCxjQUFjLENBQUMsSUFBWTtRQUN6QixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUM1QixTQUFTLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRTtZQUNuQixNQUFNLFVBQVUsR0FBRyxJQUFJLFVBQVUsQ0FBVSxDQUFDLFFBQVEsRUFBRSxFQUFFO2dCQUN0RCwwRkFBMEY7Z0JBQzFGLElBQUksQ0FBQyxNQUFNLEVBQUU7b0JBQ1gsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztvQkFDN0MsT0FBTyxTQUFTLENBQUM7aUJBQ2xCO2dCQUVELE1BQU0sUUFBUSxHQUFHLENBQUMsS0FBa0IsRUFBRSxFQUFFO29CQUN0QyxNQUFNLENBQUMsR0FBRzt3QkFDUixLQUFLO3dCQUNMLE1BQU07d0JBQ04sS0FBSztxQkFDTixDQUFDO29CQUVGLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDM0MsQ0FBQyxDQUFDO2dCQUVGLE1BQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztnQkFDbkQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO2dCQUU1RCx1QkFBdUI7Z0JBQ3ZCLE9BQU8sR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsUUFBZSxDQUFDLENBQUM7WUFDdEQsQ0FBQyxDQUFDLENBQUM7WUFFSCxPQUFPLFVBQVUsQ0FBQztRQUNwQixDQUFDLENBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQztJQUVEOzs7T0FHRztJQUNILFNBQVMsQ0FBQyxNQUEwQjtRQUNsQyxNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQztRQUUvQyxJQUFJLE1BQU0sS0FBSyxhQUFhLEVBQUU7WUFDNUIsT0FBTztTQUNSO1FBRUQsb0RBQW9EO1FBQ3BELElBQUksYUFBYSxFQUFFO1lBQ2pCLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztZQUN2QixJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQztTQUNwQjtRQUVELElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRWhDLG9FQUFvRTtRQUNwRSxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFFNUYsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7SUFDckIsQ0FBQztJQUVEOztPQUVHO0lBQ0gsT0FBTztRQUNMLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUN2QixJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQztRQUNuQixJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ2hDLENBQUM7SUFFRDs7T0FFRztJQUNLLGVBQWU7UUFDckIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRTtZQUNuQyxNQUFNLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsR0FBRyxRQUFRLENBQUM7WUFDN0MsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsUUFBZSxDQUFDLENBQUM7UUFDeEMsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQztJQUN2QixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcGllZCBmcm9tIGFuZ3VsYXIvY29tcG9uZW50cy9nb29nbGUtbWFwcyBhbmQgZWRpdGVkIGZvciBZYW5kZXguTWFwcyBBUEkuXG4gKiB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvY29tcG9uZW50cy9ibG9iL21hc3Rlci9zcmMvZ29vZ2xlLW1hcHMvbWFwLWV2ZW50LW1hbmFnZXIudHN9XG4gKi9cblxuaW1wb3J0IHsgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUsIFN1YnNjcmliZXIgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHN3aXRjaE1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IFlhRXZlbnQgfSBmcm9tICcuL3R5cGluZ3MveWEtZXZlbnQnO1xuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG50eXBlIEV2ZW50TWFuYWdlclRhcmdldCA9IHtcbiAgZXZlbnRzOiB5bWFwcy5JRXZlbnRNYW5hZ2VyO1xufTtcblxuLyoqXG4gKiBNYW5hZ2VzIGV2ZW50IG9uIGEgWWFuZGV4Lk1hcHMgb2JqZWN0LCBlbnN1cmluZyB0aGF0IGV2ZW50cyBhcmUgYWRkZWQgb25seSB3aGVuIG5lY2Vzc2FyeS5cbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY2xhc3MgRXZlbnRNYW5hZ2VyIHtcbiAgLyoqXG4gICAqIExpc3RlbmVycyB0aGF0IHdlcmUgYWRkZWQgYmVmb3JlIHRoZSB0YXJnZXQgd2FzIHNldC5cbiAgICovXG4gIHByaXZhdGUgX3BlbmRpbmc6IHtcbiAgICBvYnNlcnZhYmxlOiBPYnNlcnZhYmxlPGFueT47XG4gICAgb2JzZXJ2ZXI6IFN1YnNjcmliZXI8YW55PjtcbiAgfVtdID0gW107XG5cbiAgcHJpdmF0ZSBfbGlzdGVuZXJzOiB7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIGNhbGxiYWNrOiAoZTogeW1hcHMuRXZlbnQpID0+IHZvaWQ7XG4gICAgbWFuYWdlcjogeW1hcHMuSUV2ZW50TWFuYWdlcjtcbiAgfVtdID0gW107XG5cbiAgcHJpdmF0ZSByZWFkb25seSBfdGFyZ2V0U3RyZWFtID0gbmV3IEJlaGF2aW9yU3ViamVjdDxFdmVudE1hbmFnZXJUYXJnZXQgfCB1bmRlZmluZWQ+KHVuZGVmaW5lZCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBfbmdab25lOiBOZ1pvbmUpIHt9XG5cbiAgLyoqXG4gICAqIEdldHMgYW4gb2JzZXJ2YWJsZSB0aGF0IGFkZHMgYW4gZXZlbnQgbGlzdGVuZXIgdG8gdGhlIG1hcCB3aGVuIGEgY29uc3VtZXIgc3Vic2NyaWJlcyB0byBpdC5cbiAgICogQHBhcmFtIG5hbWVcbiAgICovXG4gIGdldExhenlFbWl0dGVyKG5hbWU6IHN0cmluZyk6IE9ic2VydmFibGU8WWFFdmVudD4ge1xuICAgIHJldHVybiB0aGlzLl90YXJnZXRTdHJlYW0ucGlwZShcbiAgICAgIHN3aXRjaE1hcCgodGFyZ2V0KSA9PiB7XG4gICAgICAgIGNvbnN0IG9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZTxZYUV2ZW50Pigob2JzZXJ2ZXIpID0+IHtcbiAgICAgICAgICAvLyBJZiB0aGUgdGFyZ2V0IGhhc24ndCBiZWVuIGluaXRpYWxpemVkIHlldCwgY2FjaGUgdGhlIG9ic2VydmVyIHNvIGl0IGNhbiBiZSBhZGRlZCBsYXRlci5cbiAgICAgICAgICBpZiAoIXRhcmdldCkge1xuICAgICAgICAgICAgdGhpcy5fcGVuZGluZy5wdXNoKHsgb2JzZXJ2YWJsZSwgb2JzZXJ2ZXIgfSk7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IGNhbGxiYWNrID0gKGV2ZW50OiB5bWFwcy5FdmVudCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZSA9IHtcbiAgICAgICAgICAgICAgZXZlbnQsXG4gICAgICAgICAgICAgIHRhcmdldCxcbiAgICAgICAgICAgICAgeW1hcHMsXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB0aGlzLl9uZ1pvbmUucnVuKCgpID0+IG9ic2VydmVyLm5leHQoZSkpO1xuICAgICAgICAgIH07XG5cbiAgICAgICAgICBjb25zdCBsaXN0ZW5lciA9IHRhcmdldC5ldmVudHMuYWRkKG5hbWUsIGNhbGxiYWNrKTtcbiAgICAgICAgICB0aGlzLl9saXN0ZW5lcnMucHVzaCh7IG5hbWUsIGNhbGxiYWNrLCBtYW5hZ2VyOiBsaXN0ZW5lciB9KTtcblxuICAgICAgICAgIC8vIFVuc3Vic2NyaWJlIGZ1bmN0aW9uXG4gICAgICAgICAgcmV0dXJuICgpID0+IGxpc3RlbmVyLnJlbW92ZShuYW1lLCBjYWxsYmFjayBhcyBhbnkpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZTtcbiAgICAgIH0pLFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgY3VycmVudCB0YXJnZXQgdGhhdCB0aGUgbWFuYWdlciBzaG91bGQgYmluZCBldmVudHMgdG8uXG4gICAqIEBwYXJhbSB0YXJnZXRcbiAgICovXG4gIHNldFRhcmdldCh0YXJnZXQ6IEV2ZW50TWFuYWdlclRhcmdldCk6IHZvaWQge1xuICAgIGNvbnN0IGN1cnJlbnRUYXJnZXQgPSB0aGlzLl90YXJnZXRTdHJlYW0udmFsdWU7XG5cbiAgICBpZiAodGFyZ2V0ID09PSBjdXJyZW50VGFyZ2V0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gQ2xlYXIgdGhlIGxpc3RlbmVycyBmcm9tIHRoZSBwcmUtZXhpc3RpbmcgdGFyZ2V0LlxuICAgIGlmIChjdXJyZW50VGFyZ2V0KSB7XG4gICAgICB0aGlzLl9jbGVhckxpc3RlbmVycygpO1xuICAgICAgdGhpcy5fcGVuZGluZyA9IFtdO1xuICAgIH1cblxuICAgIHRoaXMuX3RhcmdldFN0cmVhbS5uZXh0KHRhcmdldCk7XG5cbiAgICAvLyBBZGQgdGhlIGxpc3RlbmVycyB0aGF0IHdlcmUgYm91bmQgYmVmb3JlIHRoZSBtYXAgd2FzIGluaXRpYWxpemVkLlxuICAgIHRoaXMuX3BlbmRpbmcuZm9yRWFjaCgoc3Vic2NyaWJlcikgPT4gc3Vic2NyaWJlci5vYnNlcnZhYmxlLnN1YnNjcmliZShzdWJzY3JpYmVyLm9ic2VydmVyKSk7XG5cbiAgICB0aGlzLl9wZW5kaW5nID0gW107XG4gIH1cblxuICAvKipcbiAgICogRGVzdHJveXMgdGhlIG1hbmFnZXIgYW5kIGNsZWFycyB0aGUgZXZlbnQgbGlzdGVuZXJzLlxuICAgKi9cbiAgZGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLl9jbGVhckxpc3RlbmVycygpO1xuICAgIHRoaXMuX3BlbmRpbmcgPSBbXTtcbiAgICB0aGlzLl90YXJnZXRTdHJlYW0uY29tcGxldGUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhcnMgYWxsIGN1cnJlbnRseS1yZWdpc3RlcmVkIGV2ZW50IGxpc3RlbmVycy5cbiAgICovXG4gIHByaXZhdGUgX2NsZWFyTGlzdGVuZXJzKCkge1xuICAgIHRoaXMuX2xpc3RlbmVycy5mb3JFYWNoKChsaXN0ZW5lcikgPT4ge1xuICAgICAgY29uc3QgeyBuYW1lLCBjYWxsYmFjaywgbWFuYWdlciB9ID0gbGlzdGVuZXI7XG4gICAgICBtYW5hZ2VyLnJlbW92ZShuYW1lLCBjYWxsYmFjayBhcyBhbnkpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5fbGlzdGVuZXJzID0gW107XG4gIH1cbn1cbiJdfQ==