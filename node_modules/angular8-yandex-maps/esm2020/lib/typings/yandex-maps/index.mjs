"use strict";
/* eslint-disable @typescript-eslint/ban-types */
/* eslint-disable @typescript-eslint/brace-style */
/* eslint-disable @typescript-eslint/explicit-member-accessibility */
/* eslint-disable @typescript-eslint/no-namespace */
/* eslint-disable @typescript-eslint/no-shadow */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/no-use-before-define */
/* eslint-disable max-classes-per-file */
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../../projects/angular8-yandex-maps/src/lib/typings/yandex-maps/index.ts"],"names":[],"mappings":";AAAA,iDAAiD;AACjD,mDAAmD;AACnD,qEAAqE;AACrE,oDAAoD;AACpD,iDAAiD;AACjD,sDAAsD;AACtD,4DAA4D;AAC5D,yCAAyC","sourcesContent":["/* eslint-disable @typescript-eslint/ban-types */\n/* eslint-disable @typescript-eslint/brace-style */\n/* eslint-disable @typescript-eslint/explicit-member-accessibility */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable @typescript-eslint/no-shadow */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-use-before-define */\n/* eslint-disable max-classes-per-file */\n\n/**\n * Type definitions for Yandex.Maps.\n * Due to inactivity the typings were copied and improved from the DefinitelyTyped repository.\n * Definitions by: Delagen <https://github.com/Delagen> / gastwork13 <https://github.com/gastwork13>.\n * @link https://www.npmjs.com/package/@types/yandex-maps\n * @link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/concepts/About.html\n */\ndeclare namespace ymaps {\n  interface IClassConstructor<T> {\n    superclass: any;\n\n    new (): T;\n  }\n\n  type ControlSingleKey =\n    | 'fullscreenControl'\n    | 'geolocationControl'\n    | 'routeEditor'\n    | 'rulerControl'\n    | 'searchControl'\n    | 'trafficControl'\n    | 'typeSelector'\n    | 'zoomControl'\n    | 'routeButtonControl'\n    | 'routePanelControl';\n\n  type ControlSetKey =\n    | 'smallMapDefaultSet'\n    | 'mediumMapDefaultSet'\n    | 'largeMapDefaultSet'\n    | 'default';\n\n  type ControlKey = ControlSingleKey | ControlSetKey;\n\n  type OverlayKey =\n    | 'default#placemark'\n    | 'default#pin'\n    | 'default#circle'\n    | 'default#rectangle'\n    | 'default#polyline'\n    | 'default#polygon'\n    | 'hotspot#placemark'\n    | 'hotspot#circle'\n    | 'hotspot#rectangle'\n    | 'hotspot#polyline'\n    | 'hotspot#polygon'\n    | 'html#balloon'\n    | 'html#hint'\n    | 'html#placemark'\n    | 'html#rectangle'\n    | string\n    | IClassConstructor<IOverlay>\n    | ((\n        geometry: IPixelLineStringGeometry,\n        data: IDataManager | object,\n        options: object,\n      ) => Promise<string | IClassConstructor<IOverlay>>);\n\n  type InteractivityModelKey =\n    | 'default#opaque'\n    | 'default#geoObject'\n    | 'default#layer'\n    | 'default#transparent'\n    | 'default#silent'\n    | string;\n\n  type PresetWithTextKey =\n    | 'islands#blueIcon'\n    | 'islands#darkGreenIcon'\n    | 'islands#redIcon'\n    | 'islands#violetIcon'\n    | 'islands#darkOrangeIcon'\n    | 'islands#blackIcon'\n    | 'islands#nightIcon'\n    | 'islands#yellowIcon'\n    | 'islands#darkBlueIcon'\n    | 'islands#greenIcon'\n    | 'islands#pinkIcon'\n    | 'islands#orangeIcon'\n    | 'islands#grayIcon'\n    | 'islands#lightBlueIcon'\n    | 'islands#brownIcon'\n    | 'islands#oliveIcon';\n\n  type PresetWithTextStretchyKey =\n    | 'islands#blueStretchyIcon'\n    | 'islands#darkGreenStretchyIcon'\n    | 'islands#redStretchyIcon'\n    | 'islands#violetStretchyIcon'\n    | 'islands#darkOrangeStretchyIcon'\n    | 'islands#blackStretchyIcon'\n    | 'islands#nightStretchyIcon'\n    | 'islands#yellowStretchyIcon'\n    | 'islands#darkBlueStretchyIcon'\n    | 'islands#greenStretchyIcon'\n    | 'islands#pinkStretchyIcon'\n    | 'islands#orangeStretchyIcon'\n    | 'islands#grayStretchyIcon'\n    | 'islands#lightBlueStretchyIcon'\n    | 'islands#brownStretchyIcon'\n    | 'islands#oliveStretchyIcon';\n\n  type PresetDotKey =\n    | 'islands#blueDotIcon'\n    | 'islands#darkGreenDotIcon'\n    | 'islands#redDotIcon'\n    | 'islands#violetDotIcon'\n    | 'islands#darkOrangeDotIcon'\n    | 'islands#blackDotIcon'\n    | 'islands#nightDotIcon'\n    | 'islands#yellowDotIcon'\n    | 'islands#darkBlueDotIcon'\n    | 'islands#greenDotIcon'\n    | 'islands#pinkDotIcon'\n    | 'islands#orangeDotIcon'\n    | 'islands#grayDotIcon'\n    | 'islands#lightBlueDotIcon'\n    | 'islands#brownDotIcon'\n    | 'islands#oliveDotIcon';\n\n  type PresetCircleKey =\n    | 'islands#blueCircleIcon'\n    | 'islands#darkGreenCircleIcon'\n    | 'islands#redCircleIcon'\n    | 'islands#violetCircleIcon'\n    | 'islands#darkOrangeCircleIcon'\n    | 'islands#blackCircleIcon'\n    | 'islands#nightCircleIcon'\n    | 'islands#yellowCircleIcon'\n    | 'islands#darkBlueCircleIcon'\n    | 'islands#greenCircleIcon'\n    | 'islands#pinkCircleIcon'\n    | 'islands#orangeCircleIcon'\n    | 'islands#grayCircleIcon'\n    | 'islands#lightBlueCircleIcon'\n    | 'islands#brownCircleIcon'\n    | 'islands#oliveCircleIcon';\n\n  type PresetCircleDotKey =\n    | 'islands#blueCircleDotIcon'\n    | 'islands#darkGreenCircleDotIcon'\n    | 'islands#redCircleDotIcon'\n    | 'islands#violetCircleDotIcon'\n    | 'islands#darkOrangeCircleDotIcon'\n    | 'islands#blackCircleDotIcon'\n    | 'islands#nightCircleDotIcon'\n    | 'islands#yellowCircleDotIcon'\n    | 'islands#darkBlueCircleDotIcon'\n    | 'islands#greenCircleDotIcon'\n    | 'islands#pinkCircleDotIcon'\n    | 'islands#orangeCircleDotIcon'\n    | 'islands#grayCircleDotIcon'\n    | 'islands#lightBlueCircleDotIcon'\n    | 'islands#brownCircleDotIcon'\n    | 'islands#oliveCircleDotIcon';\n\n  type PresetWithIconKey =\n    | 'islands#blueAirportIcon'\n    | 'islands#blueAttentionIcon'\n    | 'islands#blueAutoIcon'\n    | 'islands#blueBarIcon'\n    | 'islands#blueBarberIcon'\n    | 'islands#blueBeachIcon'\n    | 'islands#blueBicycleIcon'\n    | 'islands#blueBicycle2Icon'\n    | 'islands#blueBookIcon'\n    | 'islands#blueCarWashIcon'\n    | 'islands#blueChristianIcon'\n    | 'islands#blueCinemaIcon'\n    | 'islands#blueCircusIcon'\n    | 'islands#blueCourtIcon'\n    | 'islands#blueDeliveryIcon'\n    | 'islands#blueDiscountIcon'\n    | 'islands#blueDogIcon'\n    | 'islands#blueEducationIcon'\n    | 'islands#blueEntertainmentCenterIcon'\n    | 'islands#blueFactoryIcon'\n    | 'islands#blueFamilyIcon'\n    | 'islands#blueFashionIcon'\n    | 'islands#blueFoodIcon'\n    | 'islands#blueFuelStationIcon'\n    | 'islands#blueGardenIcon'\n    | 'islands#blueGovernmentIcon'\n    | 'islands#blueHeartIcon'\n    | 'islands#blueHomeIcon'\n    | 'islands#blueHotelIcon'\n    | 'islands#blueHydroIcon'\n    | 'islands#blueInfoIcon'\n    | 'islands#blueLaundryIcon'\n    | 'islands#blueLeisureIcon'\n    | 'islands#blueMassTransitIcon'\n    | 'islands#blueMedicalIcon'\n    | 'islands#blueMoneyIcon'\n    | 'islands#blueMountainIcon'\n    | 'islands#blueNightClubIcon'\n    | 'islands#blueObservationIcon'\n    | 'islands#blueParkIcon'\n    | 'islands#blueParkingIcon'\n    | 'islands#bluePersonIcon'\n    | 'islands#bluePocketIcon'\n    | 'islands#bluePoolIcon'\n    | 'islands#bluePostIcon'\n    | 'islands#blueRailwayIcon'\n    | 'islands#blueRapidTransitIcon'\n    | 'islands#blueRepairShopIcon'\n    | 'islands#blueRunIcon'\n    | 'islands#blueScienceIcon'\n    | 'islands#blueShoppingIcon'\n    | 'islands#blueSouvenirsIcon'\n    | 'islands#blueSportIcon'\n    | 'islands#blueStarIcon'\n    | 'islands#blueTheaterIcon'\n    | 'islands#blueToiletIcon'\n    | 'islands#blueUnderpassIcon'\n    | 'islands#blueVegetationIcon'\n    | 'islands#blueVideoIcon'\n    | 'islands#blueWasteIcon'\n    | 'islands#blueWaterParkIcon'\n    | 'islands#blueWaterwayIcon'\n    | 'islands#blueWorshipIcon'\n    | 'islands#blueZooIcon';\n\n  type PresetWithIconCircleKey =\n    | 'islands#blueHomeCircleIcon'\n    | 'islands#blueScienceCircleIcon'\n    | 'islands#blueAirportCircleIcon'\n    | 'islands#blueAttentionCircleIcon'\n    | 'islands#blueAutoCircleIcon'\n    | 'islands#blueBarCircleIcon'\n    | 'islands#blueBarberCircleIcon'\n    | 'islands#blueBeachCircleIcon'\n    | 'islands#blueBicycleCircleIcon'\n    | 'islands#blueBicycle2CircleIcon'\n    | 'islands#blueBookCircleIcon'\n    | 'islands#blueCarWashCircleIcon'\n    | 'islands#blueChristianCircleIcon'\n    | 'islands#blueCinemaCircleIcon'\n    | 'islands#blueCircusCircleIcon'\n    | 'islands#blueCourtCircleIcon'\n    | 'islands#blueDeliveryCircleIcon'\n    | 'islands#blueDiscountCircleIcon'\n    | 'islands#blueDogCircleIcon'\n    | 'islands#blueEducationCircleIcon'\n    | 'islands#blueEntertainmentCenterCircleIcon'\n    | 'islands#blueFactoryCircleIcon'\n    | 'islands#blueFamilyCircleIcon'\n    | 'islands#blueFashionCircleIcon'\n    | 'islands#blueFoodCircleIcon'\n    | 'islands#blueFuelStationCircleIcon'\n    | 'islands#blueGardenCircleIcon'\n    | 'islands#blueGovernmentCircleIcon'\n    | 'islands#blueHeartCircleIcon'\n    | 'islands#blueHotelCircleIcon'\n    | 'islands#blueHydroCircleIcon'\n    | 'islands#blueInfoCircleIcon'\n    | 'islands#blueLaundryCircleIcon'\n    | 'islands#blueLeisureCircleIcon'\n    | 'islands#blueMassTransitCircleIcon'\n    | 'islands#blueMedicalCircleIcon'\n    | 'islands#blueMoneyCircleIcon'\n    | 'islands#blueMountainCircleIcon'\n    | 'islands#blueNightClubCircleIcon'\n    | 'islands#blueObservationCircleIcon'\n    | 'islands#blueParkCircleIcon'\n    | 'islands#blueParkingCircleIcon'\n    | 'islands#bluePersonCircleIcon'\n    | 'islands#bluePocketCircleIcon'\n    | 'islands#bluePoolCircleIcon'\n    | 'islands#bluePostCircleIcon'\n    | 'islands#blueRailwayCircleIcon'\n    | 'islands#blueRapidTransitCircleIcon'\n    | 'islands#blueRepairShopCircleIcon'\n    | 'islands#blueRunCircleIcon'\n    | 'islands#blueShoppingCircleIcon'\n    | 'islands#blueSouvenirsCircleIcon'\n    | 'islands#blueSportCircleIcon'\n    | 'islands#blueStarCircleIcon'\n    | 'islands#blueTheaterCircleIcon'\n    | 'islands#blueToiletCircleIcon'\n    | 'islands#blueUnderpassCircleIcon'\n    | 'islands#blueVegetationCircleIcon'\n    | 'islands#blueVideoCircleIcon'\n    | 'islands#blueWasteCircleIcon'\n    | 'islands#blueWaterParkCircleIcon'\n    | 'islands#blueWaterwayCircleIcon'\n    | 'islands#blueWorshipCircleIcon'\n    | 'islands#blueZooCircleIcon';\n\n  type PresetPictogramKey = 'islands#geolocationIcon';\n\n  type PresetClusterKey =\n    | 'islands#blueClusterIcons'\n    | 'islands#invertedBlueClusterIcons'\n    | 'islands#redClusterIcons'\n    | 'islands#invertedRedClusterIcons'\n    | 'islands#darkOrangeClusterIcons'\n    | 'islands#invertedDarkOrangeClusterIcons'\n    | 'islands#nightClusterIcons'\n    | 'islands#invertedNightClusterIcons'\n    | 'islands#darkBlueClusterIcons'\n    | 'islands#invertedDarkBlueClusterIcons'\n    | 'islands#pinkClusterIcons'\n    | 'islands#invertedPinkClusterIcons'\n    | 'islands#grayClusterIcons'\n    | 'islands#invertedGrayClusterIcons'\n    | 'islands#brownClusterIcons'\n    | 'islands#invertedBrownClusterIcons'\n    | 'islands#darkGreenClusterIcons'\n    | 'islands#invertedDarkGreenClusterIcons'\n    | 'islands#violetClusterIcons'\n    | 'islands#invertedVioletClusterIcons'\n    | 'islands#blackClusterIcons'\n    | 'islands#invertedBlackClusterIcons'\n    | 'islands#yellowClusterIcons'\n    | 'islands#invertedYellowClusterIcons'\n    | 'islands#greenClusterIcons'\n    | 'islands#invertedGreenClusterIcons'\n    | 'islands#orangeClusterIcons'\n    | 'islands#invertedOrangeClusterIcons'\n    | 'islands#lightBlueClusterIcons'\n    | 'islands#invertedLightBlueClusterIcons'\n    | 'islands#oliveClusterIcons'\n    | 'islands#invertedOliveClusterIcons';\n\n  type PresetKey =\n    | PresetWithTextKey\n    | PresetWithTextStretchyKey\n    | PresetDotKey\n    | PresetCircleKey\n    | PresetCircleDotKey\n    | PresetWithIconKey\n    | PresetWithIconCircleKey\n    | PresetPictogramKey\n    | PresetClusterKey\n    | string;\n\n  type IconLayoutKey = 'default#image' | 'default#imageWithContent' | string;\n\n  type ClusterLayoutKey =\n    | 'cluster#balloonTwoColumns'\n    | 'cluster#balloonCarousel'\n    | 'cluster#balloonAccordion'\n    | string;\n\n  type ClusterContentLayoutKey =\n    | 'cluster#balloonTwoColumnsItemContent'\n    | 'cluster#balloonCarouselItemContent'\n    | 'cluster#balloonAccordionItemContent'\n    | string;\n\n  type EventMap = GlobalEventHandlersEventMap;\n\n  namespace behavior {\n    class DblClickZoom implements IBehavior {\n      constructor(options?: IDblClickZoomOptions);\n\n      events: IEventManager;\n\n      options: IOptionManager;\n\n      disable(): void;\n\n      enable(): void;\n\n      isEnabled(): boolean;\n\n      getParent(): IControlParent | null;\n\n      setParent(parent: IControlParent): this;\n    }\n\n    interface IDblClickZoomOptions extends IMapMarginOptions {\n      centering?: boolean;\n      duration?: number;\n    }\n\n    class Drag implements IBehavior {\n      constructor(options?: IDragOptions);\n\n      events: IEventManager;\n\n      options: IOptionManager;\n\n      disable(): void;\n\n      enable(): void;\n\n      isEnabled(): boolean;\n\n      getParent(): null | IControlParent;\n\n      setParent(parent: IControlParent): this;\n    }\n\n    interface IDragOptions {\n      actionCursor?: string;\n      cursor?: string;\n      inertia?: boolean;\n      inertiaDuration?: number;\n      tremor?: number;\n    }\n\n    class LeftMouseButtonMagnifier implements IBehavior {\n      constructor(options?: ILeftMouseButtonMagnifierOptions);\n\n      events: IEventManager;\n\n      options: IOptionManager;\n\n      disable(): void;\n\n      enable(): void;\n\n      isEnabled(): boolean;\n\n      getParent(): null | IControlParent;\n\n      setParent(parent: IControlParent): this;\n    }\n\n    interface ILeftMouseButtonMagnifierOptions {\n      actionCursor?: string;\n      cursor?: string;\n      duration?: number;\n    }\n\n    class MultiTouch implements IBehavior {\n      constructor(options?: IMultiTouchOptions);\n\n      events: IEventManager;\n\n      options: IOptionManager;\n\n      disable(): void;\n\n      enable(): void;\n\n      isEnabled(): boolean;\n\n      getParent(): null | IControlParent;\n\n      setParent(parent: IControlParent): this;\n    }\n\n    interface IMultiTouchOptions {\n      tremor?: number;\n    }\n\n    class RightMouseButtonMagnifier implements IBehavior {\n      constructor(options?: IRightMouseButtonMagnifierOptions);\n\n      events: IEventManager;\n\n      options: IOptionManager;\n\n      disable(): void;\n\n      enable(): void;\n\n      isEnabled(): boolean;\n\n      getParent(): null | IControlParent;\n\n      setParent(parent: IControlParent): this;\n    }\n\n    interface IRightMouseButtonMagnifierOptions {\n      actionCursor?: string;\n      duration?: number;\n    }\n\n    class RouteEditor implements IBehavior {\n      events: IEventManager;\n\n      options: IOptionManager;\n\n      disable(): void;\n\n      enable(): void;\n\n      isEnabled(): boolean;\n\n      getParent(): null | IControlParent;\n\n      setParent(parent: IControlParent): this;\n\n      getRoute(): router.Route;\n\n      getState(): string;\n\n      setState(state: string | null): void;\n    }\n\n    class Ruler implements IBehavior {\n      constructor(options?: IRulerOptions);\n\n      events: IEventManager;\n\n      options: IOptionManager;\n\n      disable(): void;\n\n      enable(): void;\n\n      isEnabled(): boolean;\n\n      getParent(): null | IControlParent;\n\n      setParent(parent: IControlParent): this;\n\n      close(): boolean;\n\n      getState(): string;\n\n      setState(state: string | null): void;\n    }\n\n    interface IRulerOptions {\n      balloonAutoPan?: boolean;\n    }\n\n    class ScrollZoom implements IBehavior {\n      constructor(options?: IScrollZoomOptions);\n\n      events: IEventManager;\n\n      options: IOptionManager;\n\n      disable(): void;\n\n      enable(): void;\n\n      isEnabled(): boolean;\n\n      getParent(): null | IControlParent;\n\n      setParent(parent: IControlParent): this;\n    }\n\n    interface IScrollZoomOptions {\n      maximumDelta?: number;\n      speed?: number;\n    }\n\n    const storage: util.Storage;\n  }\n\n  namespace clusterer {\n    class Balloon implements IBalloonManager<Clusterer> {\n      constructor(clusterer: Clusterer);\n\n      events: IEventManager;\n\n      autoPan(): Promise<Clusterer>;\n\n      close(force?: boolean): Promise<Clusterer>;\n\n      destroy(): void;\n\n      getData(): object | null;\n\n      getOptions(): IOptionManager | null;\n\n      getOverlay(): Promise<IOverlay | null>;\n\n      getOverlaySync(): IOverlay | null;\n\n      getPosition(): number[] | null;\n\n      isOpen(): boolean;\n\n      open(\n        position?: number[],\n        data?: object | string | HTMLElement,\n        options?: object,\n      ): Promise<Clusterer>;\n\n      setData(data: object | string | HTMLElement): Promise<Clusterer>;\n\n      setOptions(options: object): Promise<Clusterer>;\n\n      setPosition(position: number[]): Promise<Clusterer>;\n    }\n\n    class Hint implements IHintManager<Clusterer> {\n      constructor(clusterer: Clusterer);\n\n      events: IEventManager;\n\n      close(force?: boolean): Promise<Clusterer>;\n\n      destroy(): void;\n\n      getData(): object | null;\n\n      getOptions(): IOptionManager | null;\n\n      getOverlay(): Promise<IOverlay | null>;\n\n      getOverlaySync(): IOverlay | null;\n\n      getPosition(): number[] | null;\n\n      isOpen(): boolean;\n\n      open(\n        position?: number[],\n        data?: object | string | HTMLElement,\n        options?: object,\n      ): Promise<Clusterer>;\n\n      setData(data: object | string | HTMLElement): Promise<Clusterer>;\n\n      setOptions(options: object): Promise<Clusterer>;\n\n      setPosition(position: number[]): Promise<Clusterer>;\n    }\n  }\n\n  namespace collection {\n    class Item implements IChildOnMap, ICustomizable, IEventEmitter, IParentOnMap {\n      constructor(options?: object);\n\n      events: IEventManager;\n\n      options: IOptionManager;\n\n      getParent(): null | IControlParent;\n\n      setParent(parent: IControlParent): this;\n\n      getMap(): Map;\n\n      onAddToMap(map: Map): void;\n\n      onRemoveFromMap(oldMap: Map): void;\n    }\n  }\n\n  namespace control {\n    class Button implements ICustomizable, ISelectableControl {\n      constructor(parameters?: IButtonParameters | string);\n\n      options: IOptionManager;\n\n      events: IEventManager;\n\n      data: data.Manager;\n\n      state: data.Manager;\n\n      deselect(): void;\n\n      disable(): void;\n\n      enable(): void;\n\n      isEnabled(): boolean;\n\n      isSelected(): boolean;\n\n      select(): void;\n\n      getParent(): null | IControlParent;\n\n      setParent(parent: IControlParent): this;\n    }\n\n    interface IBaseButtonParametersOptions {\n      adjustMapMargin?: boolean;\n      float?: 'none' | 'left' | 'right';\n      floatIndex?: number;\n      layout?: IClassConstructor<ISelectableControlLayout> | string;\n      maxWidth?: number[][] | number[] | number;\n      position?: {\n        bottom?: number | string;\n        left?: number | string;\n        right?: number | string;\n        top?: number | string;\n      };\n      visible?: boolean;\n    }\n\n    interface IButtonParameters {\n      data?: {\n        content?: string;\n        image?: string;\n        title?: string;\n      };\n      options?: IBaseButtonParametersOptions & {\n        selectOnClick?: boolean;\n        size?: 'auto' | 'small' | 'medium' | 'large';\n      };\n      state?: {\n        enabled?: boolean;\n        selected?: boolean;\n      };\n    }\n\n    class FullscreenControl extends Button {\n      constructor(parameters?: IFullscreenControlParameters);\n\n      enterFullscreen(): void;\n\n      exitFullscreen(): void;\n    }\n\n    interface IFullscreenControlParameters {\n      data?: {\n        title?: string;\n      };\n      options?: IBaseButtonParametersOptions & {\n        collapseOnBlur?: boolean;\n        expandOnClick?: boolean;\n        popupFloat?: 'left' | 'right';\n      };\n      state?: {\n        expanded?: boolean;\n      };\n    }\n\n    class GeolocationControl extends Button {\n      constructor(parameters?: IGeolocationControlParameters);\n    }\n\n    interface IGeolocationControlParameters extends IButtonParameters {\n      data?: {\n        image?: string;\n        title?: string;\n      };\n      options?: IBaseButtonParametersOptions;\n    }\n\n    class ListBox implements ICollection, IControl, ICustomizable {\n      constructor(parameters?: IListBoxParameters);\n\n      events: IEventManager;\n\n      options: IOptionManager;\n\n      data: data.Manager;\n\n      state: data.Manager;\n\n      add(object: object): this;\n\n      getIterator(): IIterator;\n\n      remove(object: object): this;\n\n      getParent(): null | IControlParent;\n\n      setParent(parent: IControlParent): this;\n    }\n\n    interface IListBoxParameters extends IButtonParameters {\n      options?: IBaseButtonParametersOptions & {\n        noPlacemark?: boolean;\n      };\n    }\n\n    class ListBoxItem implements ICustomizable, ISelectableControl {\n      constructor(parameters?: IListBoxItemParameters);\n\n      options: IOptionManager;\n\n      events: IEventManager;\n\n      data: data.Manager;\n\n      state: data.Manager;\n\n      deselect(): void;\n\n      disable(): void;\n\n      enable(): void;\n\n      isEnabled(): boolean;\n\n      isSelected(): boolean;\n\n      select(): void;\n\n      getParent(): null | IControlParent;\n\n      setParent(parent: IControlParent): this;\n\n      getMap(): Map;\n    }\n\n    interface IListBoxItemParameters {\n      data?: {\n        content?: string;\n      };\n      options?: {\n        layout?: string | IClassConstructor<ISelectableControlLayout>;\n        selectableLayout?: string | IClassConstructor<ISelectableControlLayout>;\n        selectOnClick?: boolean;\n        separatorLayout?: string | IClassConstructor<ISelectableControlLayout>;\n        type?: 'selectable' | 'separator';\n        visible?: boolean;\n      };\n      state?: {\n        selected?: boolean;\n      };\n    }\n\n    class Manager {\n      constructor(map: Map, controls?: Array<string | IControl>, options?: IManagerOptions);\n\n      events: event.Manager;\n\n      options: option.Manager;\n\n      state: data.Manager;\n\n      add(control: IControl | ControlKey, options?: IManagerControlOptions): this;\n\n      each(callback: (control: IControl) => void, context?: object): this;\n\n      get(index: number | string): IControl | null;\n\n      getChildElement(control: IControl): Promise<HTMLElement>;\n\n      getContainer(): HTMLElement;\n\n      getMap(): Map;\n\n      indexOf(childToFind: IControl | string): number;\n\n      remove(control: IControl | string): this;\n    }\n\n    interface IManagerOptions {\n      margin?: number;\n      pane?: IPane;\n      states?: string[];\n    }\n\n    interface IManagerControlOptions {\n      float?: 'none' | 'left' | 'right';\n      floatIndex?: number;\n      position?: {\n        bottom?: number | string;\n        left?: number | string;\n        right?: number | string;\n        top?: number | string;\n      };\n    }\n\n    class RouteButton implements IControl, ICustomizable {\n      constructor(parameters?: IRouteButtonParameters);\n\n      events: IEventManager;\n\n      options: IOptionManager;\n\n      routePanel: IRoutePanel;\n\n      getParent(): null | IControlParent;\n\n      setParent(parent: IControlParent): this;\n    }\n\n    interface IRouteButtonParameters {\n      options?: {\n        adjustMapMargin?: boolean;\n        collapseOnBlur?: boolean;\n        float?: 'none' | 'left' | 'right';\n        floatIndex?: number;\n        popupAnimate?: boolean;\n        popupFloat?: 'auto' | 'left' | 'right';\n        popupWidth?: string;\n        position?: {\n          bottom?: number | string;\n          left?: number | string;\n          right?: number | string;\n          top?: number | string;\n        };\n        size?: 'auto' | 'small' | 'medium' | 'large';\n        visible?: boolean;\n      };\n      state?: {\n        expanded?: boolean;\n      };\n    }\n\n    class RouteEditor extends Button {\n      constructor(parameters?: IRouteEditorParameters);\n\n      getRoute(): router.Route;\n    }\n\n    interface IRouteEditorParameters {\n      data?: {\n        image?: string;\n        title?: string;\n      };\n      options?: IBaseButtonParametersOptions;\n      state?: object;\n    }\n\n    class RoutePanel implements IControl, ICustomizable {\n      constructor(parameters?: IRoutePanelParameters);\n\n      events: IEventManager;\n\n      options: IOptionManager;\n\n      routePanel: IRoutePanel;\n\n      getParent(): null | IControlParent;\n\n      setParent(parent: IControlParent): this;\n    }\n\n    interface IRoutePanelParameters {\n      options?: {\n        autofocus?: boolean;\n        float?: 'none' | 'left' | 'right';\n        floatIndex?: number;\n        maxWidth?: string;\n        position?: {\n          bottom?: number | string;\n          left?: number | string;\n          right?: number | string;\n          top?: number | string;\n        };\n        showHeader?: boolean;\n        title?: string;\n        visible?: boolean;\n        [key: string]: any;\n      };\n      state?: {\n        fromEnabled?: boolean;\n        from?: string;\n        to?: string;\n        type?: string;\n        toEnabled?: boolean;\n      };\n    }\n\n    class RulerControl extends Button {\n      constructor(parameters?: IRulerControlParameters);\n    }\n\n    interface IRulerControlParameters {\n      data?: object;\n      options?: {\n        adjustMapMargin?: boolean;\n        position?: {\n          bottom?: number | string;\n          left?: number | string;\n          right?: number | string;\n          top?: number | string;\n        };\n        scaleLine?: boolean;\n        visible?: boolean;\n      };\n      state?: object;\n    }\n\n    class SearchControl implements IControl, ICustomizable {\n      constructor(parameters?: ISearchControlParameters);\n\n      events: IEventManager;\n\n      options: IOptionManager;\n\n      state: data.Manager;\n\n      getParent(): null | IControlParent;\n\n      setParent(parent: IControlParent): this;\n\n      clear(): void;\n\n      getMap(): Map;\n\n      getRequestString(): string;\n\n      getResponseMetaData(): object;\n\n      getResult(index: number): Promise<object>;\n\n      getResultsArray(): object[];\n\n      getResultsCount(): number;\n\n      getSelectedIndex(): number;\n\n      hideResult(): void;\n\n      search(request: string): Promise<void>;\n\n      showResult(index: number): this;\n    }\n\n    interface ISearchControlParameters {\n      data?: object;\n      options?: {\n        adjustMapMargin?: boolean;\n        boundedBy?: number[][];\n        fitMaxWidth?: boolean;\n        float?: 'none' | 'left' | 'right';\n        floatIndex?: number;\n        formLayout?: string | IClassConstructor<ILayout>;\n        kind?: 'house' | 'street' | 'metro' | 'district' | 'locality';\n        layout?: string | IClassConstructor<ISearchControlLayout>;\n        maxWidth?: number[][] | number[] | number;\n        noCentering?: boolean;\n        noPlacemark?: boolean;\n        noPopup?: boolean;\n        noSelect?: boolean;\n        noSuggestPanel?: boolean;\n        placeholderContent?: string;\n        popupItemLayout?: string | IClassConstructor<ILayout>;\n        popupLayout?: string | IClassConstructor<ILayout>;\n        position?: {\n          bottom?: number | string;\n          left?: number | string;\n          right?: number | string;\n          top?: number | string;\n        };\n        provider?: IGeocodeProvider | 'yandex#map' | 'yandex#search';\n        searchCoordOrder?: 'latlong' | 'longlat';\n        size?: 'auto' | 'small' | 'medium' | 'large';\n        strictBounds?: boolean;\n        suppressYandexSearch?: boolean;\n        useMapBounds?: boolean;\n        zoomMargin?: number;\n        visible?: boolean;\n      };\n      state?: object;\n    }\n\n    const storage: util.Storage;\n\n    class TrafficControl implements IControl, ICustomizable {\n      constructor(parameters?: ITrafficControlParameters);\n\n      data: data.Manager;\n\n      events: IEventManager;\n\n      options: IOptionManager;\n\n      state: data.Manager;\n\n      collapse(): void;\n\n      expand(): void;\n\n      getMap(): Map;\n\n      getParent(): null | IControlParent;\n\n      getProvider(key: TrafficControlProviderKey): ITrafficProvider;\n\n      hideTraffic(): void;\n\n      isExpanded(): boolean;\n\n      isTrafficShown(): boolean;\n\n      setParent(parent: IControlParent): this;\n\n      showTraffic(): void;\n    }\n\n    type TrafficControlProviderKey = 'traffic#actual' | 'traffic#archive';\n\n    interface ITrafficProvider extends ICustomizable, IEventEmitter {\n      getMap(): Map | null;\n\n      setMap(map: Map): void;\n    }\n\n    interface ITrafficControlParameters {\n      options: {\n        adjustMapMargin?: boolean;\n        collapseOnBlur?: boolean;\n        float?: 'none' | 'left' | 'right';\n        floatIndex: number;\n        layout?: string | IClassConstructor<ISelectableControlLayout>;\n        maxWidth?: number | number[];\n        position?: {\n          bottom?: number | string;\n          left?: number | string;\n          right?: number | string;\n          top?: number | string;\n        };\n        size?: string;\n        visible?: boolean;\n        state?: {\n          providerKey?: TrafficControlProviderKey;\n          trafficShown?: boolean;\n        };\n      };\n    }\n\n    class TypeSelector extends ListBox {\n      constructor(parameters?: ITypeSelectorParameters);\n    }\n\n    interface ITypeSelectorParameters {\n      options?: {\n        panoramasItemMode: 'on' | 'off' | 'ifMercator';\n      };\n    }\n\n    class ZoomControl implements IControl, ICustomizable {\n      constructor(parameters?: IZoomControlParameters);\n\n      events: IEventManager;\n\n      options: IOptionManager;\n\n      state: data.Manager;\n\n      getParent(): null | IControlParent;\n\n      setParent(parent: IControlParent): this;\n\n      clear(): void;\n\n      getMap(): Map;\n\n      getRequestString(): string;\n\n      getResponseMetaData(): object;\n\n      getResult(index: number): Promise<object>;\n\n      getResultsArray(): object[];\n\n      getResultsCount(): number;\n\n      getSelectedIndex(): number;\n\n      hideResult(): void;\n\n      search(request: string): Promise<void>;\n\n      showResult(index: number): this;\n    }\n\n    interface IZoomControlParameters {\n      data?: object;\n      options?: {\n        adjustMapMargin?: boolean;\n        layout?: string | IClassConstructor<IZoomControlLayout>;\n        float?: 'none' | 'left' | 'right';\n        position?: {\n          bottom?: number | string;\n          left?: number | string;\n          right?: number | string;\n          top?: number | string;\n        };\n        size?: string;\n        visible?: boolean;\n        zoomDuration?: number;\n        zoomStep?: number;\n        state?: object;\n      };\n    }\n\n    type IZoomControlLayout = ILayout;\n  }\n\n  namespace data {\n    class Manager implements IDataManager, IFreezable {\n      constructor(data?: object);\n\n      events: IEventManager;\n\n      get(path: string, defaultValue?: object): object;\n\n      getAll(): object;\n\n      set(path: object | string, value?: object | number | string | null | undefined): this;\n\n      setAll(): this;\n\n      unset(path: object | string): this;\n\n      unsetAll(): this;\n\n      freeze(): IFreezable;\n\n      isFrozen(): boolean;\n\n      unfreeze(): IFreezable;\n\n      add(\n        types: string[][] | string[] | string,\n        callback: (event: object | IEvent) => void,\n        context?: object,\n        priority?: number,\n      ): this;\n\n      getParent(): IEventManager | null;\n\n      group(): IEventGroup;\n\n      remove(\n        types: string[][] | string[] | string,\n        callback: (event: object | IEvent) => void,\n        context?: object,\n        priority?: number,\n      ): this;\n\n      setParent(parent: IEventManager | null): this;\n\n      fire(type: string, eventObject: object | IEvent): this;\n    }\n  }\n\n  namespace domEvent {\n    interface manager {\n      add<K extends keyof EventMap>(\n        htmlElement: HTMLElement | Document,\n        types: K,\n        callback: (event: EventMap[K]) => void,\n        context?: object,\n        capture?: boolean,\n      ): this;\n\n      add(\n        htmlElement: HTMLElement | Document,\n        types: string[] | string,\n        callback: (event: any) => void,\n        context?: object,\n        capture?: boolean,\n      ): this;\n\n      group(htmlElement: HTMLElement | Document, capture?: boolean): event.Group;\n\n      remove(\n        htmlElement: HTMLElement | Document,\n        types: string[] | string,\n        callback: ((event: any) => void) | string,\n        context?: object,\n        capture?: boolean,\n      ): this;\n    }\n  }\n\n  namespace event {\n    class Group implements IEventGroup {\n      events: IEventManager;\n\n      add<K extends keyof EventMap>(\n        types: K,\n        callback: (event: EventMap[K] | IEvent) => void,\n        context?: object,\n        priority?: number,\n      ): this;\n      add(\n        types: string[][] | string[] | string,\n        callback: (event: object | IEvent) => void,\n        context?: object,\n        priority?: number,\n      ): this;\n\n      remove(\n        types: string[][] | string[] | string,\n        callback: (event: object | IEvent) => void,\n        context?: object,\n        priority?: number,\n      ): this;\n\n      removeAll(): this;\n\n      getLength(): number;\n    }\n\n    class Manager<TargetGeometry = {}> implements IEventManager<TargetGeometry> {\n      constructor(params?: {\n        context?: object | undefined;\n        controllers?: IEventWorkflowController[] | undefined;\n        parent?: IEventManager | undefined;\n      });\n\n      add<K extends keyof EventMap>(\n        types: K,\n        callback: (event: IEvent<EventMap[K], TargetGeometry>) => void,\n        context?: object,\n        priority?: number,\n      ): this;\n\n      add(\n        types: string[][] | string[] | string,\n        callback: (event: IEvent<{}, TargetGeometry>) => void,\n        context?: object,\n        priority?: number,\n      ): this;\n\n      getParent(): IEventManager | null;\n\n      group(): IEventGroup;\n\n      remove(\n        types: string[][] | string[] | string,\n        callback: (event: object | IEvent) => void,\n        context?: object,\n        priority?: number,\n      ): this;\n\n      setParent(parent: IEventManager | null): this;\n\n      fire(type: string, eventObject: object | IEvent): this;\n\n      createEventObject(type: string, event: object, target: object): Event;\n\n      once(\n        types: string[][] | string[] | string,\n        callback: (event: IEvent) => any,\n        context?: object,\n        priority?: number,\n      ): this;\n    }\n\n    class Mapper implements IEventTrigger {\n      constructor(\n        targetEventManager: IEventManager,\n        mappingTable: Record<string, ((event: IEvent) => IEvent | null) | boolean>,\n      );\n\n      fire(type: string, eventObject?: object | IEvent): this;\n    }\n  }\n\n  namespace geometry {\n    namespace base {\n      class LineString implements IBaseLineStringGeometry {\n        events: IEventManager;\n\n        static fromEncodedCoordinates(encodedCoordinates: string): geometry.LineString;\n\n        static toEncodedCoordinates(geometry: geometry.LineString): string;\n\n        getBounds(): number[][] | null;\n\n        getType(): string;\n\n        get(index: number): number[];\n\n        getChildGeometry(index: number): IPointGeometryAccess;\n\n        getClosest(anchorPosition: number[]): object;\n\n        getCoordinates(): number[][];\n\n        getLength(): number;\n\n        insert(index: number, coordinates: number[][]): ILineStringGeometryAccess;\n\n        remove(index: number): number[];\n\n        remove(\n          types: string[][] | string[] | string,\n          callback: (event: object | IEvent) => void,\n          context?: object,\n          priority?: number,\n        ): this;\n\n        set(index: number, coordinates: number[]): ILineStringGeometryAccess;\n\n        setCoordinates(coordinates: number[][]): ILineStringGeometryAccess;\n\n        splice(index: number, length: number): number[][];\n\n        freeze(): IFreezable;\n\n        isFrozen(): boolean;\n\n        unfreeze(): IFreezable;\n\n        add(\n          types: string[][] | string[] | string,\n          callback: (event: object | IEvent) => void,\n          context?: object,\n          priority?: number,\n        ): this;\n\n        getParent(): object | null;\n\n        group(): IEventGroup;\n\n        setParent(parent: IEventManager | null): this;\n\n        fire(type: string, eventObject: object | IEvent): this;\n      }\n\n      class Point implements IBasePointGeometry {\n        events: IEventManager;\n\n        getBounds(): number[][] | null;\n\n        getType(): string;\n\n        getCoordinates(): number[] | null;\n\n        setCoordinates(coordinates: number[] | null): this;\n      }\n\n      class Polygon implements IBasePointGeometry {\n        constructor(coordinates?: number[][][], fillRule?: 'evenOdd' | 'nonZero');\n\n        events: IEventManager;\n\n        static fromEncodedCoordinates(encodedCoordinates: string): Polygon;\n\n        static toEncodedCoordinates(geometry: Polygon): string;\n\n        contains(position: number[]): boolean;\n\n        freeze(): IFreezable;\n\n        get(index: number): number[][];\n\n        getBounds(): number[][] | null;\n\n        getChildGeometry(index: number): ILinearRingGeometryAccess;\n\n        getClosest(anchorPosition: number[]): object;\n\n        getCoordinates(): number[] | null;\n\n        getFillRule(): 'evenOdd' | 'nonZero';\n\n        getLength(): number;\n\n        getType(): string;\n\n        insert(index: number, path: number[][]): IPolygonGeometryAccess;\n\n        isFrozen(): boolean;\n\n        remove(index: number): ILinearRingGeometryAccess;\n\n        set(index: number, path: number[][]): IPolygonGeometryAccess;\n\n        setCoordinates(coordinates: number[] | null): this;\n\n        setFillRule(fillRule: 'evenOdd' | 'nonZero'): IPolygonGeometryAccess;\n\n        splice(index: number, number: number): ILinearRingGeometryAccess[];\n\n        unfreeze(): IFreezable;\n      }\n    }\n\n    class Circle implements ICircleGeometry {\n      constructor(\n        coordinates?: number[] | null,\n        radius?: number,\n        options?: {\n          geodesic?: boolean;\n          pixelRendering?: string;\n          projection?: IProjection;\n        },\n      );\n\n      events: IEventManager;\n\n      options: IOptionManager;\n\n      contains(position: number[]): boolean;\n\n      freeze(): IFreezable;\n\n      getBounds(): number[][] | null;\n\n      getClosest(anchorPosition: number[]): object;\n\n      getCoordinates(): number[] | null;\n\n      getMap(): Map | null;\n\n      getPixelGeometry(options?: object): IPixelGeometry;\n\n      getRadius(): number;\n\n      getType(): string;\n\n      isFrozen(): boolean;\n\n      setCoordinates(coordinates: number[] | null): ICircleGeometryAccess;\n\n      setMap(map: Map): void;\n\n      setRadius(radius: number): ICircleGeometryAccess;\n\n      unfreeze(): IFreezable;\n    }\n\n    class LineString implements ILineStringGeometry {\n      constructor(\n        coordinates?: number[][],\n        options?: {\n          coordRendering?: 'shortestPath' | 'straightPath';\n          geodesic?: boolean;\n          pixelRendering?: 'jumpy' | 'static';\n          projection?: IProjection;\n          simplification?: boolean;\n        },\n      );\n\n      events: IEventManager;\n\n      options: IOptionManager;\n\n      static fromEncodedCoordinates(encodedCoordinates: string): LineString;\n\n      static toEncodedCoordinates(geometry: LineString): string;\n\n      getMap(): Map | null;\n\n      getPixelGeometry(options?: object): IPixelGeometry;\n\n      setMap(map: Map): void;\n\n      getBounds(): number[][] | null;\n\n      getType(): string;\n\n      get(index: number): number[];\n\n      getChildGeometry(index: number): IPointGeometryAccess;\n\n      getClosest(anchorPosition: number[]): object;\n\n      getCoordinates(): number[][];\n\n      getLength(): number;\n\n      insert(index: number, coordinates: number[][]): ILineStringGeometryAccess;\n\n      remove(index: number): number[];\n\n      remove(\n        types: string[][] | string[] | string,\n        callback: (event: object | IEvent) => void,\n        context?: object,\n        priority?: number,\n      ): this;\n\n      set(index: number, coordinates: number[]): ILineStringGeometryAccess;\n\n      setCoordinates(coordinates: number[][]): ILineStringGeometryAccess;\n\n      splice(index: number, length: number): number[][];\n\n      freeze(): IFreezable;\n\n      isFrozen(): boolean;\n\n      unfreeze(): IFreezable;\n\n      add(\n        types: string[][] | string[] | string,\n        callback: (event: object | IEvent) => void,\n        context?: object,\n        priority?: number,\n      ): this;\n\n      getParent(): object | null;\n\n      group(): IEventGroup;\n\n      setParent(parent: IEventManager | null): this;\n\n      fire(type: string, eventObject: object | IEvent): this;\n    }\n\n    namespace pixel {\n      class Circle implements IPixelCircleGeometry {\n        constructor(coordinates: number[] | null, radius: number, metaData?: object);\n\n        events: IEventManager;\n\n        equals(geometry: IPixelGeometry): boolean;\n\n        getBounds(): number[][] | null;\n\n        getCoordinates(): number[];\n\n        getMetaData(): object;\n\n        getRadius(): number;\n\n        getType(): string;\n\n        scale(factor: number): IPixelGeometry;\n\n        shift(offset: number[]): IPixelGeometry;\n      }\n\n      class LineString implements IPixelLineStringGeometry {\n        constructor(coordinates: number[][], metaData?: object);\n\n        events: IEventManager;\n\n        equals(geometry: IPixelGeometry): boolean;\n\n        getBounds(): number[][] | null;\n\n        getClosest(anchorPosition: number[]): object;\n\n        getCoordinates(): number[][];\n\n        getLength(): number;\n\n        getMetaData(): object;\n\n        getType(): string;\n\n        scale(factor: number): IPixelGeometry;\n\n        shift(offset: number[]): IPixelGeometry;\n      }\n\n      class MultiLineString implements IPixelMultiLineGeometry {\n        constructor(coordinates: number[][][], metaData?: object);\n\n        events: IEventManager;\n\n        equals(geometry: IPixelGeometry): boolean;\n\n        getBounds(): number[][] | null;\n\n        getClosest(anchorPosition: number[]): object;\n\n        getCoordinates(): number[][][];\n\n        getLength(): number;\n\n        getMetaData(): object;\n\n        getType(): string;\n\n        scale(factor: number): IPixelGeometry;\n\n        shift(offset: number[]): IPixelGeometry;\n      }\n\n      class MultiPolygon implements IPixelMultiPolygonGeometry {\n        constructor(\n          coordinates: number[][][][],\n          fillRule: 'evenOdd' | 'nonZero',\n          metaData?: object,\n        );\n\n        events: IEventManager;\n\n        contains(position: number[]): boolean;\n\n        equals(geometry: IPixelGeometry): boolean;\n\n        getBounds(): number[][] | null;\n\n        getClosest(anchorPosition: number[]): object;\n\n        getCoordinates(): number[][][][];\n\n        getFillRule(): 'evenOdd' | 'nonZero';\n\n        getLength(): number;\n\n        getMetaData(): object;\n\n        getType(): string;\n\n        scale(factor: number): IPixelGeometry;\n\n        shift(offset: number[]): IPixelGeometry;\n      }\n\n      class Point implements IPixelPointGeometry {\n        constructor(position: number[] | null, metaData?: object);\n\n        events: IEventManager;\n\n        equals(geometry: IPixelGeometry): boolean;\n\n        getBounds(): number[][] | null;\n\n        getCoordinates(): number[];\n\n        getMetaData(): object;\n\n        getType(): string;\n\n        scale(factor: number): IPixelGeometry;\n\n        shift(offset: number[]): IPixelGeometry;\n      }\n\n      class Polygon implements IPixelPolygonGeometry {\n        constructor(coordinates: number[][][], fillRule: 'evenOdd' | 'nonZero', metaData?: object);\n\n        events: IEventManager;\n\n        contains(position: number[]): boolean;\n\n        equals(geometry: IPixelGeometry): boolean;\n\n        getBounds(): number[][] | null;\n\n        getClosest(anchorPosition: number[]): object;\n\n        getCoordinates(): number[][][];\n\n        getFillRule(): 'evenOdd' | 'nonZero';\n\n        getLength(): number;\n\n        getMetaData(): object;\n\n        getType(): string;\n\n        scale(factor: number): IPixelGeometry;\n\n        shift(offset: number[]): IPixelGeometry;\n      }\n\n      class Rectangle implements IPixelRectangleGeometry {\n        constructor(coordinates: number[][] | null, metaData?: object);\n\n        events: IEventManager;\n\n        equals(geometry: IPixelGeometry): boolean;\n\n        getBounds(): number[][] | null;\n\n        getClosest(anchorPosition: number[]): object;\n\n        getCoordinates(): number[][];\n\n        getMetaData(): object;\n\n        getType(): string;\n\n        scale(factor: number): IPixelGeometry;\n\n        shift(offset: number[]): IPixelGeometry;\n      }\n    }\n\n    class Point implements IPointGeometry {\n      constructor(coordinates?: number[] | null);\n\n      options: IOptionManager;\n\n      events: IEventManager;\n\n      getMap(): Map | null;\n\n      getPixelGeometry(options?: object): IPixelGeometry;\n\n      setMap(map: Map): void;\n\n      getBounds(): number[][] | null;\n\n      getType(): string;\n\n      getCoordinates(): number[] | null;\n\n      setCoordinates(coordinates: number[] | null): this;\n    }\n\n    class Polygon implements IPolygonGeometry {\n      constructor(coordinates?: number[][][], fillRule?: 'evenOdd' | 'nonZero', options?: object);\n\n      events: IEventManager;\n\n      options: IOptionManager;\n\n      static fromEncodedCoordinates(encodedCoordinates: string): Polygon;\n\n      static toEncodedCoordinates(geometry: Polygon): string;\n\n      add(\n        types: string[][] | string[] | string,\n        callback: (event: object | IEvent) => void,\n        context?: object,\n        priority?: number,\n      ): this;\n\n      contains(position: number[]): boolean;\n\n      fire(type: string, eventObject: object | IEvent): this;\n\n      freeze(): IFreezable;\n\n      get(index: number): number[][];\n\n      getBounds(): number[][] | null;\n\n      getChildGeometry(index: number): ILinearRingGeometryAccess;\n\n      getClosest(anchorPosition: number[]): object;\n\n      getCoordinates(): number[][][];\n\n      getFillRule(): 'evenOdd' | 'nonZero';\n\n      getLength(): number;\n\n      getMap(): Map | null;\n\n      getParent(): object | null;\n\n      getPixelGeometry(options?: object): IPixelGeometry;\n\n      getType(): string;\n\n      group(): IEventGroup;\n\n      insert(index: number, path: number[][]): IPolygonGeometryAccess;\n\n      isFrozen(): boolean;\n\n      remove(index: number): ILinearRingGeometryAccess;\n\n      set(index: number, path: number[][]): IPolygonGeometryAccess;\n\n      setCoordinates(coordinates: number[][][]): IPolygonGeometryAccess;\n\n      setFillRule(fillRule: 'evenOdd' | 'nonZero'): IPolygonGeometryAccess;\n\n      setMap(map: Map): void;\n\n      setParent(parent: object | null): this;\n\n      splice(index: number, number: number): ILinearRingGeometryAccess[];\n\n      unfreeze(): IFreezable;\n    }\n\n    class Rectangle implements IRectangleGeometry {\n      constructor(\n        coordinates?: number[][] | null,\n        options?: {\n          coordRendering?: string;\n          geodesic?: boolean;\n          pixelRendering?: string;\n          projection?: IProjection;\n        },\n      );\n\n      events: IEventManager;\n\n      options: IOptionManager;\n\n      contains(position: number[]): boolean;\n\n      freeze(): IFreezable;\n\n      getBounds(): number[][] | null;\n\n      getClosest(anchorPosition: number[]): object;\n\n      getCoordinates(): number[][];\n\n      getMap(): Map | null;\n\n      getPixelGeometry(options?: object): IPixelGeometry;\n\n      getType(): string;\n\n      isFrozen(): boolean;\n\n      setCoordinates(coordinates: number[][]): IRectangleGeometryAccess;\n\n      setMap(map: Map): void;\n\n      unfreeze(): IFreezable;\n    }\n  }\n\n  namespace geometryEditor {\n    class Circle implements IGeometryEditor {\n      constructor(geometry: ICircleGeometry, options?: object);\n\n      events: IEventManager;\n\n      geometry: IGeometry;\n\n      options: IOptionManager;\n\n      state: IDataManager;\n\n      startDrawing(): vow.Promise;\n\n      startEditing(): void;\n\n      stopDrawing(): vow.Promise;\n\n      stopEditing(): void;\n    }\n\n    class LineString implements IGeometryEditor {\n      constructor(geometry: ILineStringGeometry, options?: object);\n\n      events: IEventManager;\n\n      geometry: IGeometry;\n\n      options: IOptionManager;\n\n      state: IDataManager;\n\n      getModel(): vow.Promise;\n\n      getModelSync(): model.RootLineString | null;\n\n      getView(): vow.Promise;\n\n      getViewSync(): view.Path | null;\n\n      startDrawing(): vow.Promise;\n\n      startEditing(): vow.Promise;\n\n      startFraming(): vow.Promise;\n\n      stopDrawing(): void;\n\n      stopEditing(): void;\n\n      stopFraming(): void;\n    }\n\n    namespace model {\n      class ChildLinearRing extends ChildLineString {}\n\n      class ChildLineString implements IGeometryEditorChildModel {\n        editor: IGeometryEditor;\n\n        events: IEventManager;\n\n        geometry: IBaseGeometry;\n\n        destroy(): void;\n\n        getAllVerticesNumber(): number;\n\n        getEdgeModels(): Edge[];\n\n        getIndex(): number;\n\n        getParent(): IGeometryEditorModel;\n\n        getPixels(): number[];\n\n        getVertexModels(): ChildVertex[];\n\n        setIndex(index: number): void;\n\n        setPixels(pixels: number[]): void;\n\n        spliceVertices(start: number, deleteCount: number): number[][];\n      }\n\n      class ChildVertex implements IGeometryEditorChildModel {\n        editor: IGeometryEditor;\n\n        events: IEventManager;\n\n        geometry: IBaseGeometry;\n\n        destroy(): void;\n\n        getAllVerticesNumber(): number;\n\n        getIndex(): number;\n\n        getNextVertex(): ChildVertex | null;\n\n        getParent(): IGeometryEditorModel;\n\n        getPixels(): number[];\n\n        getPrevVertex(): ChildVertex | null;\n\n        setGlobalPixels(pixels: number[]): void;\n\n        setIndex(index: number): void;\n\n        setNextVertex(nextVertex: ChildVertex): void;\n\n        setPixels(pixels: number[]): void;\n\n        setPrevVertex(prevVertex: ChildVertex): void;\n      }\n\n      class Edge implements IGeometryEditorRootModel {\n        events: IEventManager;\n\n        destroy(): void;\n\n        getNextVertex(): ChildVertex | null;\n\n        getPixels(): number[];\n\n        getPrevVertex(): ChildVertex | null;\n\n        setNextVertex(nextVertex: ChildVertex): void;\n\n        setPrevVertex(prevVertex: ChildVertex): void;\n      }\n\n      class EdgeGeometry implements IGeometry {\n        events: IEventManager;\n\n        options: IOptionManager;\n\n        getBounds(): number[][] | null;\n\n        getMap(): Map | null;\n\n        getPixelGeometry(options?: object): IPixelGeometry;\n\n        getType(): string;\n\n        setMap(map: Map): void;\n      }\n\n      class RootLineString implements IGeometryEditorRootModel {\n        events: IEventManager;\n\n        destroy(): void;\n\n        getAllVerticesNumber(): number;\n\n        getPixels(): number[];\n\n        getVertexModels(): ChildVertex[];\n\n        spliceVertices(start: number, deleteCount: number): number[][];\n      }\n\n      class RootPolygon implements IGeometryEditorRootModel {\n        events: IEventManager;\n\n        destroy(): void;\n\n        getAllVerticesNumber(): number;\n\n        getPathModels(): ChildLinearRing[];\n\n        getPixels(): number[];\n\n        splicePaths(start: number, deleteCount: number): number[][];\n      }\n    }\n\n    class Point implements IGeometryEditor {\n      constructor(\n        geometry: IPointGeometry,\n        options?: {\n          dblClickHandler?: (ref: any) => void;\n          drawingCursor?: string;\n          drawOver?: boolean;\n        },\n      );\n\n      events: IEventManager;\n\n      geometry: IGeometry;\n\n      options: IOptionManager;\n\n      state: IDataManager;\n\n      startDrawing(): vow.Promise;\n\n      startEditing(): void;\n\n      stopDrawing(): vow.Promise;\n\n      stopEditing(): void;\n    }\n\n    class Polygon implements IGeometryEditor {\n      constructor(geometry: IPolygonGeometry, options: object);\n\n      events: IEventManager;\n\n      geometry: IGeometry;\n\n      options: IOptionManager;\n\n      state: IDataManager;\n\n      getModel(): vow.Promise;\n\n      getModelSync(): model.RootPolygon | null;\n\n      getView(): vow.Promise;\n\n      getViewSync(): view.MultiPath | null;\n\n      startDrawing(): vow.Promise;\n\n      startEditing(): vow.Promise;\n\n      startFraming(): vow.Promise;\n\n      stopDrawing(): void;\n\n      stopEditing(): void;\n\n      stopFraming(): void;\n    }\n\n    namespace view {\n      class Edge {\n        getPlacemark(): GeoObject;\n      }\n\n      class MultiPath {\n        getEdgePlacemarks(): GeoObjectCollection;\n\n        getPathViews(): Path[];\n\n        getVertexPlacemarks(): GeoObjectCollection;\n      }\n\n      class Path {\n        getEdgePlacemarks(): GeoObjectCollection;\n\n        getEdgeViews(): Edge[];\n\n        getVertexPlacemarks(): GeoObjectCollection;\n\n        getVertexViews(): Vertex[];\n      }\n\n      class Vertex {\n        getPlacemark(): GeoObject;\n      }\n    }\n  }\n\n  namespace geoObject {\n    class Balloon implements IBalloonManager<GeoObject> {\n      constructor(geoObject: GeoObject);\n\n      events: IEventManager;\n\n      autoPan(): Promise<GeoObject>;\n\n      close(force?: boolean): Promise<GeoObject>;\n\n      destroy(): void;\n\n      getData(): object | null;\n\n      getOptions(): IOptionManager | null;\n\n      getOverlay(): Promise<IOverlay | null>;\n\n      getOverlaySync(): IOverlay | null;\n\n      getPosition(): number[] | null;\n\n      isOpen(): boolean;\n\n      open(\n        position?: number[],\n        data?: object | string | HTMLElement,\n        options?: object,\n      ): Promise<GeoObject>;\n\n      setData(data: object | string | HTMLElement): Promise<GeoObject>;\n\n      setOptions(options: object): Promise<GeoObject>;\n\n      setPosition(position: number[]): Promise<GeoObject>;\n    }\n\n    class Hint implements IHintManager<GeoObject> {\n      constructor(geoObject: GeoObject);\n\n      events: IEventManager;\n\n      close(force?: boolean): Promise<GeoObject>;\n\n      destroy(): void;\n\n      getData(): object | null;\n\n      getOptions(): IOptionManager | null;\n\n      getOverlay(): Promise<IOverlay | null>;\n\n      getOverlaySync(): IOverlay | null;\n\n      getPosition(): number[] | null;\n\n      isOpen(): boolean;\n\n      open(\n        position?: number[],\n        data?: object | string | HTMLElement,\n        options?: object,\n      ): Promise<GeoObject>;\n\n      setData(data: object | string | HTMLElement): Promise<GeoObject>;\n\n      setOptions(options: object): Promise<GeoObject>;\n\n      setPosition(position: number[]): Promise<GeoObject>;\n    }\n\n    class Sequence implements IGeoObject, IGeoObjectSequence {\n      constructor(geoObject: GeoObject);\n\n      geometry: IGeometry | null;\n\n      properties: IDataManager;\n\n      state: IDataManager;\n\n      events: IEventManager;\n\n      options: IOptionManager;\n\n      getOverlay(): Promise<IOverlay | null>;\n\n      getOverlaySync(): IOverlay | null;\n\n      getParent(): null | IControlParent;\n\n      setParent(parent: IControlParent): this;\n\n      getMap(): Map;\n\n      each(callback: (geoObject: IGeoObject) => void, context?: object): void;\n\n      get(index: number): IGeoObject;\n\n      getBounds(): number[][] | null;\n\n      getIterator(): IIterator;\n\n      getLength(): number;\n\n      getPixelBounds(): number[][] | null;\n\n      indexOf(geoObject: IGeoObject): number;\n    }\n  }\n\n  namespace layout {\n    namespace templateBased {\n      class Base implements ILayout {\n        constructor(data: object);\n\n        events: IEventManager;\n\n        destroy(): void;\n\n        getData(): object;\n\n        getParentElement(): HTMLElement;\n\n        getShape(): IShape | null;\n\n        isEmpty(): boolean;\n\n        setData(data: object): void;\n\n        setParentElement(parent: HTMLElement | null): this;\n\n        build(): void;\n\n        clear(): void;\n\n        onSublayoutSizeChange(sublayoutInfo: object, nodeSizeByContent: object): void;\n\n        rebuild(): void;\n      }\n    }\n\n    interface IImageOptions {\n      imageClipRect?: number[][] | undefined;\n      imageHref?: string | undefined;\n      imageOffset?: number[] | undefined;\n      imageSize?: number[] | undefined;\n      shape?: IShape | object | null | undefined;\n    }\n\n    interface IImageOptionsWithIconPrefix {\n      iconImageClipRect?: number[][] | undefined;\n      iconImageHref?: string | undefined;\n      iconImageOffset?: number[] | undefined;\n      iconImageSize?: number[] | undefined;\n      iconShape?: IShape | object | null | undefined;\n    }\n\n    class Image implements ILayout {\n      constructor(data: { options?: IImageOptions });\n\n      events: IEventManager;\n\n      destroy(): void;\n\n      getData(): object;\n\n      getParentElement(): HTMLElement;\n\n      getShape(): IShape | null;\n\n      isEmpty(): boolean;\n\n      setData(data: object): void;\n\n      setParentElement(parent: HTMLElement | null): void;\n    }\n\n    class ImageWithContent extends Image {}\n\n    interface IImageWithContentOptionsWithIconPrefix extends IImageOptionsWithIconPrefix {\n      iconContentLayout?: IClassConstructor<ILayout> | string | undefined;\n      iconContentOffset?: number[] | undefined;\n      iconContentSize?: number[] | undefined;\n    }\n\n    class PieChart extends templateBased.Base {}\n\n    interface IPieChartOptionsWithIconPrefix {\n      iconPieChartCaptionMaxWidth?: number | undefined;\n      iconPieChartCoreFillStyle?: string | undefined;\n      iconPieChartCoreRadius?: number | (() => number) | undefined;\n      iconPieChartStrokeStyle?: string | undefined;\n      iconPieChartStrokeWidth?: number | undefined;\n    }\n\n    const storage: util.Storage;\n  }\n\n  namespace map {\n    namespace action {\n      class Manager implements IEventEmitter {\n        constructor(map: Map);\n\n        events: IEventManager;\n\n        breakTick(): void;\n\n        execute(action: IMapAction): void;\n\n        getCurrentState(): object;\n\n        getMap(): Map;\n\n        setCorrection(userFunction: () => void): void;\n\n        stop(): void;\n      }\n    }\n\n    namespace behavior {\n      class Manager implements ICustomizable, IEventEmitter, IParentOnMap {\n        constructor(map: Map, behaviors?: string[][] | string[], options?: object);\n\n        options: IOptionManager;\n\n        events: IEventManager;\n\n        getMap(): Map;\n\n        disable(behaviors: string[][] | string[] | string): this;\n\n        enable(behaviors: string[][] | string[] | string): this;\n\n        get(behaviorName: string): IBehavior;\n\n        isEnabled(behaviorName: string): boolean;\n      }\n    }\n\n    namespace layer {\n      class Manager implements ILayer, IMapObjectCollection {\n        constructor(\n          map: Map,\n          options?: {\n            trafficImageZIndex?: number;\n            trafficInfoZIndex?: number;\n            trafficJamZIndex?: number;\n          },\n        );\n\n        events: IEventManager;\n\n        options: IOptionManager;\n\n        getParent(): null | IControlParent;\n\n        setParent(parent: IControlParent): this;\n\n        add(object: object): this;\n\n        each(callback: (layer: ILayer) => void, context?: object): void;\n\n        getIterator(): IIterator;\n\n        remove(object: object): this;\n\n        getMap(): Map;\n\n        getAll(): Array<Collection<Layer>>;\n      }\n    }\n\n    namespace margin {\n      class Accessor {\n        constructor(screenArea: object);\n\n        getArea(): object;\n\n        remove(): this;\n\n        setArea(screenArea: object): this;\n      }\n\n      class Manager {\n        constructor(map: Map);\n\n        addArea(screenArea: object): Accessor;\n\n        destroy(): this;\n\n        getMargin(): number[];\n\n        getOffset(): number[];\n\n        setDefaultMargin(margin: number[][] | number[] | number): void;\n      }\n    }\n\n    namespace pane {\n      class Manager {\n        constructor(map: Map);\n\n        append(key: string, pane: IPane): void;\n\n        destroy(): void;\n\n        get(key: string): IPane | null;\n\n        getLower(): string;\n\n        getUpper(): string;\n\n        insertBefore(key: string, pane: IPane, referenceKey: string): void;\n\n        remove(pane: IPane): void;\n      }\n    }\n\n    class Balloon implements IBalloonManager<Balloon> /* , IBalloonSharingManager */ {\n      constructor(map: Map);\n\n      events: IEventManager;\n\n      autoPan(): Promise<Balloon>;\n\n      close(force?: boolean): Promise<Balloon>;\n\n      destroy(): void;\n\n      getData(): object | null;\n\n      getOptions(): IOptionManager | null;\n\n      getOverlay(): Promise<IOverlay | null>;\n\n      getOverlaySync(): IOverlay | null;\n\n      getPosition(): number[] | null;\n\n      isOpen(): boolean;\n\n      open(\n        position?: number[],\n        data?: object | string | HTMLElement,\n        options?: object,\n      ): Promise<Balloon>;\n\n      setData(data: object | string | HTMLElement): Promise<Balloon>;\n\n      setOptions(options: object): Promise<Balloon>;\n\n      setPosition(position: number[]): Promise<Balloon>;\n    }\n\n    class Container implements IDomEventEmitter {\n      constructor(parentElement: string | HTMLElement);\n\n      events: IEventManager;\n\n      enterFullscreen(): void;\n\n      exitFullscreen(): void;\n\n      fitToViewport(preservePixelPosition?: boolean): void;\n\n      getElement(): HTMLElement;\n\n      getOffset(): number[];\n\n      getParentElement(): HTMLElement;\n\n      getSize(): number[];\n\n      isFullscreen(): boolean;\n    }\n\n    class Converter {\n      constructor(map: Map);\n\n      globalToPage(globalPixelPoint: number[]): number[];\n\n      pageToGlobal(pagePixelPoint: number[]): number[];\n    }\n\n    class Copyrights {\n      constructor(map: Map);\n\n      add(\n        customCopyrights: string | HTMLElement | Array<string | HTMLElement>,\n      ): ICopyrightsAccessor;\n\n      addProvider(provider: ICopyrightsProvider): this;\n\n      get(point?: number[], zoom?: number): Promise<Array<string | HTMLElement>>;\n\n      getPromoLink(): string;\n\n      removeProvider(provider: ICopyrightsProvider): this;\n    }\n\n    class GeoObjects implements IGeoObjectCollection {\n      constructor(map: Map, options?: object);\n\n      options: IOptionManager;\n\n      events: IEventManager;\n\n      add(child: IGeoObject | ObjectManager | Clusterer, index?: number): this;\n\n      each(callback: (object: IGeoObject) => void, context?: object): void;\n\n      get(index: number): IGeoObject;\n\n      getBounds(): number[][] | null;\n\n      getIterator(): IIterator;\n\n      getLength(): number;\n\n      getPixelBounds(): number[][] | null;\n\n      indexOf(object: IGeoObject): number;\n\n      remove(child: IGeoObject | ObjectManager): this;\n\n      removeAll(): this;\n\n      set(index: number, child: IGeoObject): this;\n\n      splice(index: number, length: number): this;\n\n      getMap(): Map;\n    }\n\n    class Hint implements IHintManager<Hint> /* , IHintSharingManager */ {\n      constructor(map: Map);\n\n      events: IEventManager;\n\n      close(force?: boolean): Promise<Hint>;\n\n      destroy(): void;\n\n      getData(): object | null;\n\n      getOptions(): IOptionManager | null;\n\n      getOverlay(): Promise<IOverlay | null>;\n\n      getOverlaySync(): IOverlay | null;\n\n      getPosition(): number[] | null;\n\n      isOpen(): boolean;\n\n      open(\n        position?: number[],\n        data?: object | string | HTMLElement,\n        options?: object,\n      ): Promise<Hint>;\n\n      setData(data: object | string | HTMLElement): Promise<Hint>;\n\n      setOptions(options: object): Promise<Hint>;\n\n      setPosition(position: number[]): Promise<Hint>;\n    }\n\n    class ZoomRange implements IEventEmitter {\n      constructor(map: Map, constraints: number[]);\n\n      events: IEventManager;\n\n      get(coords?: number[]): Promise<number[]>;\n\n      getCurrent(): number[];\n    }\n  }\n\n  namespace multiRouter {\n    namespace driving {\n      class Path implements IGeoObject {\n        geometry: IGeometry | null;\n\n        properties: data.Manager;\n\n        state: IDataManager;\n\n        model: PathModel;\n\n        events: IEventManager;\n\n        options: IOptionManager;\n\n        getOverlay(): Promise<IOverlay | null>;\n\n        getOverlaySync(): IOverlay | null;\n\n        getParent(): object | null;\n\n        setParent(parent: object): this;\n\n        getMap(): Map;\n\n        getSegments(): GeoObjectCollection;\n      }\n\n      class PathModel implements IEventEmitter {\n        events: IEventManager;\n\n        properties: data.Manager;\n\n        route: RouteModel;\n\n        destroy(): void;\n\n        getSegments(): SegmentModel[];\n\n        getType(): string;\n\n        update(pathJson: object): void;\n      }\n\n      class Route implements IGeoObject {\n        geometry: IGeometry | null;\n\n        properties: IDataManager;\n\n        state: IDataManager;\n\n        events: IEventManager;\n\n        options: IOptionManager;\n\n        balloon: geoObject.Balloon;\n\n        getOverlay(): Promise<IOverlay | null>;\n\n        getOverlaySync(): IOverlay | null;\n\n        getParent(): object | null;\n\n        setParent(parent: object): this;\n\n        getMap(): Map;\n\n        getPaths(): GeoObjectCollection;\n      }\n\n      class RouteModel implements IEventEmitter {\n        events: IEventManager;\n\n        multiRoute: MultiRouteModel;\n\n        properties: data.Manager;\n\n        destroy(): void;\n\n        getPaths(): PathModel[];\n\n        update(routeJson: object): void;\n\n        getType(): string;\n      }\n\n      class Segment implements IGeoObject {\n        geometry: IGeometry | null;\n\n        properties: data.Manager;\n\n        state: IDataManager;\n\n        events: IEventManager;\n\n        options: IOptionManager;\n\n        getOverlay(): Promise<IOverlay | null>;\n\n        getOverlaySync(): IOverlay | null;\n\n        getParent(): object | null;\n\n        setParent(parent: object): this;\n\n        getMap(): Map;\n      }\n\n      class SegmentModel implements IEventEmitter {\n        events: IEventManager;\n\n        geometry: geometry.base.LineString;\n\n        path: PathModel;\n\n        destroy(): void;\n\n        getType(): string;\n\n        getViaPoints(): ViaPointModel[];\n\n        update(segmentJson: object): void;\n      }\n    }\n\n    namespace masstransit {\n      class Path implements IGeoObject {\n        geometry: IGeometry | null;\n\n        properties: data.Manager;\n\n        state: IDataManager;\n\n        events: IEventManager;\n\n        options: IOptionManager;\n\n        model: PathModel;\n\n        getOverlay(): Promise<IOverlay | null>;\n\n        getOverlaySync(): IOverlay | null;\n\n        getParent(): object | null;\n\n        setParent(parent: object): this;\n\n        getMap(): Map;\n\n        getSegmentMarkers(): GeoObjectCollection;\n\n        getSegments(): GeoObjectCollection;\n      }\n\n      class PathModel implements IEventEmitter {\n        events: IEventManager;\n\n        properties: data.Manager;\n\n        route: RouteModel;\n\n        destroy(): void;\n\n        getSegments(): Array<TransferSegmentModel | TransportSegmentModel | WalkSegmentModel>;\n\n        getType(): string;\n\n        update(pathJson: object): void;\n      }\n\n      class Route implements IGeoObject {\n        geometry: IGeometry | null;\n\n        properties: data.Manager;\n\n        model: RouteModel;\n\n        state: IDataManager;\n\n        events: IEventManager;\n\n        options: IOptionManager;\n\n        balloon: geoObject.Balloon;\n\n        getOverlay(): Promise<IOverlay | null>;\n\n        getOverlaySync(): IOverlay | null;\n\n        getParent(): object | null;\n\n        setParent(parent: object): this;\n\n        getMap(): Map;\n\n        getPaths(): GeoObjectCollection;\n      }\n\n      class RouteModel implements IEventEmitter {\n        events: IEventManager;\n\n        multiRoute: MultiRouteModel;\n\n        properties: data.Manager;\n\n        destroy(): void;\n\n        getPaths(): PathModel[];\n\n        getType(): string;\n\n        update(routeJson: object): void;\n      }\n\n      class StopModel implements IEventEmitter {\n        events: IEventManager;\n\n        geometry: geometry.base.Point;\n\n        properties: data.Manager;\n\n        segment: TransportSegmentModel;\n\n        update(stopJson: object): void;\n      }\n\n      class TransferSegment implements IGeoObject {\n        geometry: IGeometry | null;\n\n        properties: data.Manager;\n\n        state: IDataManager;\n\n        events: IEventManager;\n\n        options: IOptionManager;\n\n        model: TransferSegmentModel;\n\n        getOverlay(): Promise<IOverlay | null>;\n\n        getOverlaySync(): IOverlay | null;\n\n        getParent(): object | null;\n\n        setParent(parent: object): this;\n\n        getMap(): Map;\n      }\n\n      class TransferSegmentModel implements IEventEmitter {\n        events: IEventManager;\n\n        geometry: geometry.base.LineString;\n\n        path: PathModel;\n\n        properties: data.Manager;\n\n        destroy(segmentJson: object): void;\n\n        getType(): string;\n      }\n\n      class TransportSegment implements IGeoObject {\n        geometry: IGeometry | null;\n\n        properties: data.Manager;\n\n        state: IDataManager;\n\n        events: IEventManager;\n\n        options: IOptionManager;\n\n        model: TransportSegmentModel;\n\n        getOverlay(): Promise<IOverlay | null>;\n\n        getOverlaySync(): IOverlay | null;\n\n        getParent(): object | null;\n\n        setParent(parent: object): this;\n\n        getMap(): Map;\n      }\n\n      class TransportSegmentModel implements IEventEmitter {\n        events: IEventManager;\n\n        geometry: geometry.base.LineString;\n\n        path: PathModel;\n\n        properties: data.Manager;\n\n        destroy(): void;\n\n        getStops(): StopModel[];\n\n        getType(): string;\n\n        update(segmentJson: object): void;\n      }\n\n      class WalkSegment implements IGeoObject {\n        geometry: IGeometry | null;\n\n        properties: data.Manager;\n\n        state: IDataManager;\n\n        events: IEventManager;\n\n        options: IOptionManager;\n\n        model: WalkSegmentModel;\n\n        getOverlay(): Promise<IOverlay | null>;\n\n        getOverlaySync(): IOverlay | null;\n\n        getParent(): object | null;\n\n        setParent(parent: object): this;\n\n        getMap(): Map;\n      }\n\n      class WalkSegmentModel implements IEventEmitter {\n        events: IEventManager;\n\n        geometry: geometry.base.LineString;\n\n        path: PathModel;\n\n        properties: data.Manager;\n\n        destroy(): void;\n\n        getType(): string;\n      }\n    }\n\n    class EditorAddon implements ICustomizable, IEventEmitter {\n      options: IOptionManager;\n\n      events: IEventManager;\n\n      state: data.Manager;\n\n      isActive(): boolean;\n\n      start(state: object): void;\n\n      stop(): void;\n    }\n\n    class MultiRoute implements IGeoObject {\n      constructor(model: MultiRouteModel | IMultiRouteModelJson, options?: IMultiRouteOptions);\n\n      editor: EditorAddon;\n\n      events: IEventManager;\n\n      geometry: IGeometry | null;\n\n      model: MultiRouteModel;\n\n      options: IOptionManager;\n\n      properties: IDataManager;\n\n      state: IDataManager;\n\n      getActiveRoute(): multiRouter.driving.Route | multiRouter.masstransit.Route | null;\n\n      getBounds(): number[][] | null;\n\n      getMap(): Map;\n\n      getOverlay(): Promise<IOverlay | null>;\n\n      getOverlaySync(): IOverlay | null;\n\n      getParent(): object | null;\n\n      getPixelBounds(): number[][] | null;\n\n      getRoutes(): GeoObjectCollection;\n\n      getViaPoints(): GeoObjectCollection;\n\n      getWayPoints(): GeoObjectCollection;\n\n      setActiveRoute(route: driving.Route | masstransit.Route | null): void;\n\n      setParent(parent: object): this;\n    }\n\n    interface IMultiRouteOptions {\n      activeRouteAutoSelection?: boolean;\n      boundsAutoApply?: boolean;\n      dragUpdateInterval?: string | number;\n      preventDragUpdate?: boolean;\n      useMapMargin?: boolean;\n      zoomMargin?: number[][] | number[] | number;\n\n      [index: string]: any;\n    }\n\n    class MultiRouteModel implements IEventEmitter {\n      constructor(referencePoints: IMultiRouteReferencePoint[], params?: IMultiRouteParams);\n\n      events: IEventManager;\n\n      properties: data.Manager;\n\n      destroy(): void;\n\n      getAllPoints(): Array<WayPointModel | ViaPointModel>;\n\n      getJson(): object;\n\n      getParams(): IMultiRouteParams;\n\n      getPoints(): Array<WayPointModel | ViaPointModel>;\n\n      getReferencePointIndexes(): object;\n\n      getReferencePoints(): IMultiRouteReferencePoint[];\n\n      getRoutes(): driving.RouteModel[] | masstransit.RouteModel[];\n\n      getViaPoints(): ViaPointModel[];\n\n      getWayPoints(): WayPointModel[];\n\n      setParams(params: IMultiRouteParams, extend?: boolean, clearRequests?: boolean): void;\n\n      setReferencePoints(\n        referencePoints: IMultiRouteReferencePoint[],\n        viaIndexes?: number[],\n        clearRequests?: boolean,\n      ): void;\n    }\n\n    class ViaPoint implements IGeoObject {\n      geometry: IGeometry | null;\n\n      properties: data.Manager;\n\n      state: IDataManager;\n\n      events: IEventManager;\n\n      options: IOptionManager;\n\n      getOverlay(): Promise<IOverlay | null>;\n\n      getOverlaySync(): IOverlay | null;\n\n      getParent(): object | null;\n\n      setParent(parent: object): this;\n\n      getMap(): Map;\n    }\n\n    class ViaPointModel implements IEventEmitter {\n      events: IEventManager;\n\n      geometry: geometry.base.Point;\n\n      multiRoute: MultiRouteModel;\n\n      properties: data.Manager;\n\n      destroy(): void;\n\n      getReferencePoint(): object;\n\n      getReferencePointIndex(): number;\n\n      setReferencePoint(referencePoint: object): void;\n\n      update(viaPointJson: object): void;\n    }\n\n    class WayPoint implements IGeoObject {\n      geometry: IGeometry | null;\n\n      properties: data.Manager;\n\n      state: IDataManager;\n\n      events: IEventManager;\n\n      options: IOptionManager;\n\n      model: WayPointModel;\n\n      getOverlay(): Promise<IOverlay | null>;\n\n      getOverlaySync(): IOverlay | null;\n\n      getParent(): object | null;\n\n      setParent(parent: object): this;\n\n      getMap(): Map;\n    }\n\n    class WayPointModel implements IEventEmitter {\n      events: IEventManager;\n\n      geometry: geometry.base.Point;\n\n      multiRoute: MultiRouteModel;\n\n      properties: data.Manager;\n\n      destroy(): void;\n\n      getReferencePoint(): object;\n\n      getReferencePointIndex(): number;\n\n      setReferencePoint(referencePoint: object): void;\n\n      update(wayPointJson: object): void;\n    }\n  }\n\n  namespace option {\n    class Manager implements IOptionManager {\n      constructor(options?: object, parent?: IOptionManager, name?: string);\n\n      events: IEventManager;\n\n      get(key: string, defaultValue?: object): object;\n\n      getAll(): object;\n\n      getName(): string;\n\n      getNative(key: string): object;\n\n      resolve(key: string, name?: string): object;\n\n      set(key: object | string, value?: object | number | string | null | undefined): this;\n\n      unset(keys: string[][] | string[] | string): this;\n\n      unsetAll(): this;\n\n      setName(name: string): void;\n\n      getParent(): null | IOptionManager;\n\n      setParent(parent: IOptionManager): this;\n\n      freeze(): IFreezable;\n\n      isFrozen(): boolean;\n\n      unfreeze(): IFreezable;\n\n      add(\n        types: string[][] | string[] | string,\n        callback: (event: object | IEvent) => void,\n        context?: object,\n        priority?: number,\n      ): this;\n\n      group(): IEventGroup;\n\n      remove(\n        types: string[][] | string[] | string,\n        callback: (event: object | IEvent) => void,\n        context?: object,\n        priority?: number,\n      ): this;\n\n      fire(type: string, eventObject: object | IEvent): this;\n    }\n\n    const presetStorage: util.Storage;\n  }\n\n  namespace pane {\n    class EventsPane implements IEventPane {\n      constructor(\n        map: Map,\n        params: {\n          className?: string;\n          css?: CSSStyleDeclaration;\n          patch?: {\n            selectable?: boolean;\n          };\n          transparent?: boolean;\n          checkContextMenu?: boolean;\n          zIndex?: number;\n        },\n      );\n\n      events: IEventManager;\n\n      destroy(): void;\n\n      getElement(): HTMLElement;\n\n      getMap(): Map;\n\n      getOverflow(): 'visible' | 'hidden';\n\n      getZIndex(): number;\n    }\n\n    class MovablePane implements IContainerPane {\n      constructor(\n        map: Map,\n        params: {\n          css?: CSSStyleDeclaration;\n          margin?: number;\n          overflow?: 'hidden' | 'visible';\n          zIndex?: number;\n        },\n      );\n\n      events: IEventManager;\n\n      destroy(): void;\n\n      fromClientPixels(clientPixelPoint: number[]): number[];\n\n      getElement(): HTMLElement;\n\n      getMap(): Map;\n\n      getOverflow(): 'visible' | 'hidden';\n\n      getZIndex(): number;\n\n      getZoom(): number;\n\n      toClientPixels(globalPixelPoint: number[]): number[];\n    }\n\n    class StaticPane implements IContainerPane {\n      constructor(\n        map: Map,\n        params: {\n          css?: CSSStyleDeclaration;\n          margin?: number;\n          overflow?: 'visible' | 'hidden';\n          zIndex?: number;\n        },\n      );\n\n      events: IEventManager;\n\n      destroy(): void;\n\n      fromClientPixels(clientPixelPoint: number[]): number[];\n\n      getElement(): HTMLElement;\n\n      getMap(): Map;\n\n      getOverflow(): 'visible' | 'hidden';\n\n      getZIndex(): number;\n\n      getZoom(): number;\n\n      toClientPixels(globalPixelPoint: number[]): number[];\n    }\n  }\n\n  namespace panorama {\n    type Layer = 'yandex#panorama' | 'yandex#airPanorama';\n\n    class Base implements IPanorama {\n      static createPanorama(params: {\n        angularBBox: number[];\n        coordSystem?: ICoordSystem;\n        name?: string;\n        position: number[];\n        tilesLevels: IPanoramaTileLevel[];\n        tileSize: number[];\n      }): IPanorama;\n\n      static getMarkerPositionFromDirection(\n        panorama: IPanorama,\n        direction: number[],\n        distance: number,\n      ): number[];\n\n      getAngularBBox(): number[];\n\n      getConnectionArrows(): IPanoramaConnectionArrow[];\n\n      getConnectionMarkers(): IPanoramaConnectionMarker[];\n\n      getConnections(): IPanoramaConnectionMarker[];\n\n      getCoordSystem(): ICoordSystem;\n\n      getDefaultDirection(): number[];\n\n      getDefaultSpan(): number[];\n\n      getGraph(): IPanoramaGraph | null;\n\n      getMarkers(): IPanoramaMarker[];\n\n      getName(): string;\n\n      getPosition(): number[];\n\n      getThoroughfares(): IPanoramaConnectionArrow[];\n\n      getTileLevels(): IPanoramaTileLevel[];\n\n      getTileSize(): number[];\n\n      validate(): void;\n    }\n\n    function createPlayer(\n      element: HTMLElement | string,\n      point: number[],\n      options?: {\n        direction?: number[] | string;\n        layer?: Layer;\n        span?: number[] | string;\n      },\n    ): Promise<Player>;\n\n    function isSupported(): boolean;\n\n    function locate(point: number[], options?: { layer?: Layer }): Promise<IPanorama[]>;\n\n    class Manager implements IEventEmitter {\n      events: IEventManager;\n\n      closePlayer(): void;\n\n      disableLookup(): void;\n\n      enableLookup(): void;\n\n      getPlayer(): Player;\n\n      isLookupEnabled(): boolean;\n\n      openPlayer(panorama: IPanorama[] | number): Promise<void>;\n    }\n\n    interface IPlayerOptions {\n      autoFitToViewport?: 'none' | 'ifNull' | 'always';\n      controls?: string[];\n      direction?: number[] | string;\n      hotkeysEnabled?: boolean;\n      scrollZoomBehavior?: boolean;\n      span?: number[] | string;\n      suppressMapOpenBlock?: boolean;\n    }\n\n    class Player implements IEventEmitter {\n      constructor(element: HTMLElement | string, panorama: IPanorama, options?: IPlayerOptions);\n\n      events: IEventManager;\n\n      destroy(): void;\n\n      fitToViewport(): void;\n\n      getDirection(): number[];\n\n      getPanorama(): IPanorama;\n\n      getSpan(): number[];\n\n      lookAt(point: number[]): this;\n\n      moveTo(\n        point: number[],\n        options?: {\n          direction?: number[] | string;\n          layer?: Layer;\n          span?: number[] | string;\n        },\n      ): Promise<void>;\n\n      setDirection(direction: number[] | string): this;\n\n      setPanorama(panorama: IPanorama): this;\n\n      setSpan(span: number[] | string): this;\n    }\n  }\n\n  namespace router {\n    class Editor implements ICustomizable, IEventEmitter {\n      options: IOptionManager;\n\n      events: IEventManager;\n\n      start(options?: {\n        addViaPoints?: boolean;\n        addWayPoints?: boolean;\n        editViaPoints?: boolean;\n        editWayPoints?: boolean;\n        removeViaPoints?: boolean;\n        removeWayPoints?: boolean;\n      }): void;\n\n      stop(): void;\n    }\n\n    abstract class Route implements IGeoObject {\n      geometry: IGeometry | null;\n\n      properties: IDataManager;\n\n      state: IDataManager;\n\n      events: IEventManager;\n\n      options: IOptionManager;\n\n      editor: Editor;\n\n      getOverlay(): Promise<IOverlay | null>;\n\n      getOverlaySync(): IOverlay | null;\n\n      getParent(): null | IControlParent;\n\n      setParent(parent: IControlParent): this;\n\n      getMap(): Map;\n\n      getHumanJamsTime(): string;\n\n      getHumanLength(): string;\n\n      getHumanTime(): string;\n\n      getJamsTime(): number;\n\n      getLength(): number;\n\n      getPaths(): GeoObjectCollection;\n\n      getTime(): number;\n\n      getViaPoints(): GeoObjectCollection;\n\n      getWayPoints(): GeoObjectCollection;\n    }\n  }\n\n  namespace shape {\n    class Circle implements IShape {\n      constructor(\n        pixelGeometry: IPixelCircleGeometry,\n        params?: {\n          fill?: boolean;\n          outline?: boolean;\n          strokeWidth?: number;\n        },\n      );\n\n      contains(position: number[]): boolean;\n\n      equals(shape: IShape): boolean;\n\n      getBounds(): number[][] | null;\n\n      getGeometry(): IPixelGeometry;\n\n      getType(): string;\n\n      scale(factor: number): IShape;\n\n      shift(offset: number[]): IShape;\n    }\n\n    class LineString implements IShape {\n      constructor(\n        pixelGeometry: IPixelLineStringGeometry,\n        params?: {\n          strokeWidth?: number;\n        },\n      );\n\n      contains(position: number[]): boolean;\n\n      equals(shape: IShape): boolean;\n\n      getBounds(): number[][] | null;\n\n      getGeometry(): IPixelGeometry;\n\n      getType(): string;\n\n      scale(factor: number): IShape;\n\n      shift(offset: number[]): IShape;\n    }\n\n    class MultiPolygon implements IShape {\n      constructor(\n        pixelGeometry: IPixelMultiPolygonGeometry,\n        params?: {\n          fill?: boolean;\n          outline?: boolean;\n          strokeWidth?: number;\n        },\n      );\n\n      contains(position: number[]): boolean;\n\n      equals(shape: IShape): boolean;\n\n      getBounds(): number[][] | null;\n\n      getGeometry(): IPixelGeometry;\n\n      getType(): string;\n\n      scale(factor: number): IShape;\n\n      shift(offset: number[]): IShape;\n    }\n\n    class Polygon implements IShape {\n      constructor(\n        pixelGeometry: IPixelPolygonGeometry,\n        params?: {\n          fill?: boolean;\n          outline?: boolean;\n          strokeWidth?: number;\n        },\n      );\n\n      contains(position: number[]): boolean;\n\n      equals(shape: IShape): boolean;\n\n      getBounds(): number[][] | null;\n\n      getGeometry(): IPixelGeometry;\n\n      getType(): string;\n\n      scale(factor: number): IShape;\n\n      shift(offset: number[]): IShape;\n    }\n\n    class Rectangle implements IShape {\n      constructor(\n        geometry: IPixelRectangleGeometry,\n        params?: {\n          fill?: boolean;\n          outline?: boolean;\n          strokeWidth?: number;\n        },\n      );\n\n      contains(position: number[]): boolean;\n\n      equals(shape: IShape): boolean;\n\n      getBounds(): number[][] | null;\n\n      getGeometry(): IPixelGeometry;\n\n      getType(): string;\n\n      scale(factor: number): IShape;\n\n      shift(offset: number[]): IShape;\n    }\n  }\n\n  interface meta {\n    coordinatesOrder: 'latlong' | 'longlat';\n    countryCode: string;\n    languageCode: string;\n    mode: 'release' | 'debug';\n    ns: typeof ymaps;\n    version: string;\n  }\n\n  class Balloon extends Popup<Balloon> implements IBaloon<Balloon>, IBalloonManager<Balloon> {\n    constructor(map: Map, options?: IBalloonOptions);\n\n    getData(): object;\n\n    close(force?: boolean): Promise<Balloon>;\n\n    getParent(): Balloon | null;\n\n    setParent(parent: Balloon): this;\n\n    autoPan(): Promise<Balloon>;\n\n    freeze(): IFreezable;\n\n    isFrozen(): boolean;\n\n    unfreeze(): IFreezable;\n\n    add(\n      types: string[][] | string[] | string,\n      callback: (event: object | IEvent) => void,\n      context?: object,\n      priority?: number,\n    ): this;\n\n    group(): IEventGroup;\n\n    remove(\n      types: string[][] | string[] | string,\n      callback: (event: object | IEvent) => void,\n      context?: object,\n      priority?: number,\n    ): this;\n\n    fire(type: string, eventObject: object | IEvent): this;\n\n    destroy(): void;\n\n    getOptions(): IOptionManager | null;\n\n    setOptions(options: object): Promise<Balloon>;\n  }\n\n  interface IBalloonOptions {\n    autoPan?: boolean;\n    autoPanCheckZoomRange?: boolean;\n    autoPanDuration?: number;\n    autoPanMargin?: number | number[] | undefined;\n    autoPanUseMapMargin?: boolean;\n    closeButton?: boolean;\n    closeTimeout?: number | undefined;\n    contentLayout?: IClassConstructor<ILayout> | string;\n    interactivityModel?: InteractivityModelKey | undefined;\n    layout?: IClassConstructor<ILayout> | string;\n    maxHeight?: number;\n    maxWidth?: number;\n    minHeight?: number;\n    minWidth?: number;\n    offset?: number[];\n    openTimeout?: number | undefined;\n    pane?: string;\n    panelContentLayout?: IClassConstructor<ILayout> | string;\n    panelMaxHeightRatio?: number;\n    panelMaxMapArea?: number;\n    shadow?: boolean;\n    shadowLayout?: IClassConstructor<ILayout> | string;\n    shadowOffset?: number[];\n    zIndex?: string | undefined;\n  }\n\n  interface IBalloonOptionsWithBalloonPrefix {\n    balloonContent?: string | undefined;\n    balloonAutoPan?: boolean | undefined;\n    balloonAutoPanCheckZoomRange?: boolean | undefined;\n    balloonAutoPanDuration?: number | undefined;\n    balloonAutoPanMargin?: number | number[] | undefined;\n    balloonAutoPanUseMapMargin?: boolean | undefined;\n    balloonCloseButton?: boolean | undefined;\n    balloonCloseTimeout?: number | undefined;\n    balloonContentLayout?: IClassConstructor<ILayout> | string | undefined;\n    balloonInteractivityModel?: InteractivityModelKey | undefined;\n    balloonLayout?: IClassConstructor<ILayout> | string | undefined;\n    balloonMaxHeight?: number | undefined;\n    balloonMaxWidth?: number | undefined;\n    balloonMinHeight?: number | undefined;\n    balloonMinWidth?: number | undefined;\n    balloonOffset?: number[] | undefined;\n    balloonOpenTimeout?: number | undefined;\n    balloonPane?: string | undefined;\n    balloonPanelContentLayout?: IClassConstructor<ILayout> | string | undefined;\n    balloonPanelMaxHeightRatio?: number | undefined;\n    balloonPanelMaxMapArea?: number | undefined;\n    balloonShadow?: boolean | undefined;\n    balloonShadowLayout?: IClassConstructor<ILayout> | string | undefined;\n    balloonShadowOffset?: number[] | undefined;\n    balloonZIndex?: string | undefined;\n  }\n\n  class Circle implements GeoObject<ICircleGeometry> {\n    constructor(\n      geometry: ICircleGeometry[][][][] | number[][] | object,\n      properties?: object | IDataManager,\n      options?: ICircleOptions,\n    );\n\n    balloon: geoObject.Balloon;\n\n    editor: IGeometryEditor;\n\n    hint: geoObject.Hint;\n\n    events: event.Manager;\n\n    options: option.Manager;\n\n    properties: data.Manager;\n\n    state: data.Manager;\n\n    geometry: ICircleGeometry | null;\n\n    indices: ArrayBuffer;\n\n    vertices: ArrayBuffer;\n\n    getOverlay(): Promise<IOverlay | null>;\n\n    getOverlaySync(): IOverlay | null;\n\n    getParent(): null | IControlParent;\n\n    setParent(parent: IControlParent): this;\n\n    getMap(): Map;\n  }\n\n  interface ICircleOptions {\n    circleOverlay?:\n      | string\n      | ((geometry: IPixelCircleGeometry, data: object, options: object) => Promise<IOverlay>);\n    cursor?: string;\n    draggable?: boolean;\n    fill?: boolean;\n    fillColor?: string;\n    fillImageHref?: string;\n    fillMethod?: 'stretch' | 'tile';\n    fillOpacity?: number;\n    hasBalloon?: boolean;\n    hasHint?: boolean;\n    hideIconOnBalloonOpen?: boolean;\n    interactiveZIndex?: boolean;\n    interactivityModel?: InteractivityModelKey;\n    opacity?: number;\n    openBalloonOnClick?: boolean;\n    openEmptyBalloon?: boolean;\n    openEmptyHint?: boolean;\n    openHintOnHover?: boolean;\n    outline?: boolean;\n    pane?: string;\n    strokeColor?: string[][] | string[] | string;\n    strokeOpacity?: number[][] | number[] | number;\n    strokeStyle?: string[][][] | object[][] | string[] | object[] | string | object;\n    strokeWidth?: number[][] | number[] | number;\n    syncOverlayInit?: boolean;\n    useMapMarginInDragging?: boolean;\n    visible?: boolean;\n    zIndex?: number;\n    zIndexActive?: number;\n    zIndexDrag?: number;\n    zIndexHover?: number;\n  }\n\n  class Clusterer implements IChildOnMap, ICustomizable, IEventEmitter, IParentOnMap {\n    constructor(options?: IClustererOptions);\n\n    events: IEventManager;\n\n    options: option.Manager;\n\n    balloon: clusterer.Balloon;\n\n    hint: clusterer.Hint;\n\n    add(objects: IGeoObject | IGeoObject[]): this;\n\n    createCluster(center: number[], geoObjects: IGeoObject[]): IGeoObject;\n\n    getBounds(): number[][] | null;\n\n    getClusters(): IGeoObject[];\n\n    getGeoObjects(): IGeoObject[];\n\n    getMap(): Map;\n\n    getObjectState(geoObject: IGeoObject): { isShown: boolean; cluster: any; isClustered: boolean };\n\n    getParent(): IParentOnMap | null;\n\n    remove(objects: IGeoObject | IGeoObject[]): this;\n\n    removeAll(): this;\n\n    setParent(parent: IControlParent): this;\n  }\n\n  interface IClustererOptionsInject {\n    gridSize?: number;\n    groupByCoordinates?: boolean;\n    hasBalloon?: boolean;\n    hasHint?: boolean;\n    margin?: number[] | number | undefined;\n    maxZoom?: number[] | number;\n    minClusterSize?: number;\n    preset?: PresetKey;\n    showInAlphabeticalOrder?: boolean;\n    useMapMargin?: boolean;\n    viewportMargin?: number[] | number | undefined;\n    zoomMargin?: number[] | number | undefined;\n  }\n\n  interface IClustererOptions\n    extends IClustererOptionsInject,\n      IClusterPlacemarkOptionsWithClusterPrefix {\n    hasBalloon?: boolean | undefined;\n    hasHint?: boolean | undefined;\n\n    [key: string]: any;\n  }\n\n  class ClusterPlacemark implements IGeoObject, collection.Item {\n    constructor(\n      geometry: number[] | object | IPointGeometry,\n      properties: IClusterPlacemarkProperties,\n      options?: IClusterPlacemarkOptions,\n    );\n\n    geometry: IGeometry | null;\n\n    properties: IDataManager;\n\n    events: IEventManager;\n\n    options: IOptionManager;\n\n    state: data.Manager;\n\n    getOverlay(): Promise<IOverlay | null>;\n\n    getOverlaySync(): IOverlay | null;\n\n    getParent(): null | IControlParent;\n\n    setParent(parent: IControlParent): this;\n\n    getMap(): Map;\n\n    onAddToMap(map: Map): void;\n\n    onRemoveFromMap(oldMap: Map): void;\n\n    getBounds(): number[][] | null;\n\n    getGeoObjects(): IGeoObject[];\n  }\n\n  interface IClusterPlacemarkProperties extends IDataManager {\n    geoObjects: IGeoObject[];\n  }\n\n  interface IClusterPlacemarkOptions {\n    balloonContentLayout?: IClassConstructor<ILayout> | ClusterLayoutKey | undefined;\n    balloonContentLayoutHeight?: number;\n    balloonContentLayoutWidth?: number;\n    balloonItemContentLayout?: ILayout | ClusterContentLayoutKey | undefined;\n    balloonPanelContentLayout?: IClassConstructor<ILayout> | ClusterLayoutKey | undefined;\n    cursor?: string;\n    disableClickZoom?: boolean;\n    hideIconOnBalloonOpen?: boolean;\n    iconColor?: string;\n    iconContentLayout?: string | IClassConstructor<ILayout>;\n    iconLayout?: string | IClassConstructor<ILayout>;\n    icons?: {\n      href: string;\n      size: number[];\n      offset: number[];\n      shape?: IShape | IGeometryJson;\n    }[];\n    iconShape?: IGeometryJson;\n    interactivityModel?: InteractivityModelKey;\n    numbers?: number[];\n    openBalloonOnClick?: boolean;\n    openEmptyHint?: boolean;\n    openHintOnHover?: boolean;\n    zIndexHover?: number;\n  }\n\n  interface IClusterPlacemarkOptionsWithClusterPrefix {\n    clusterBalloonContentLayout?: IClassConstructor<ILayout> | ClusterLayoutKey | undefined;\n    clusterBalloonContentLayoutHeight?: number | undefined;\n    clusterBalloonContentLayoutWidth?: number | undefined;\n    clusterBalloonItemContentLayout?: ILayout | ClusterContentLayoutKey | undefined;\n    clusterBalloonPanelContentLayout?: IClassConstructor<ILayout> | ClusterLayoutKey | undefined;\n    clusterCursor?: string | undefined;\n    clusterDisableClickZoom?: boolean | undefined;\n    clusterHideIconOnBalloonOpen?: boolean | undefined;\n    clusterIconColor?: string | undefined;\n    clusterIconContentLayout?: IClassConstructor<ILayout> | string | undefined;\n    clusterIconLayout?: IClassConstructor<ILayout> | string | undefined;\n    clusterIcons?: {\n      href: string;\n      size: number[];\n      offset: number[];\n      shape?: IShape | IGeometryJson | undefined;\n    }[];\n    clusterIconShape?: IGeometryJson | undefined;\n    clusterInteractivityModel?: InteractivityModelKey | undefined;\n    clusterNumbers?: number[] | undefined;\n    clusterOpenBalloonOnClick?: boolean | undefined;\n    clusterOpenEmptyHint?: boolean | undefined;\n    clusterOpenHintOnHover?: boolean | undefined;\n    clusterZIndexHover?: number | undefined;\n  }\n\n  class Collection<T = {}> implements ICollection, collection.Item {\n    constructor(options?: object);\n\n    events: IEventManager;\n\n    options: IOptionManager;\n\n    add(object: object): this;\n\n    getIterator(): IIterator;\n\n    remove(object: object): this;\n\n    getParent(): null | IControlParent;\n\n    setParent(parent: IControlParent): this;\n\n    getMap(): Map;\n\n    onAddToMap(map: Map): void;\n\n    onRemoveFromMap(oldMap: Map): void;\n\n    filter(filterFunction: (object: object) => boolean): object[];\n\n    get(index: number): object;\n\n    getAll(): T[];\n\n    getLength(): number;\n\n    indexOf(childToFind: object): number;\n\n    removeAll(): this;\n  }\n\n  class Event<OriginalEvent = {}, TargetGeometry = {}>\n    implements IEvent<OriginalEvent, TargetGeometry>\n  {\n    constructor(originalEvent: object, sourceEvent: IEvent);\n\n    originalEvent: {\n      domEvent: {\n        originalEvent: OriginalEvent;\n      };\n      target: {\n        geometry?: TargetGeometry;\n      };\n    };\n\n    allowMapEvent(): void;\n\n    callMethod(name: string): void;\n\n    get<T extends OriginalEvent, K extends keyof T = keyof T>(name: K): T[K];\n\n    get(name: string): any;\n\n    getSourceEvent(): IEvent<OriginalEvent, TargetGeometry> | null;\n\n    isDefaultPrevented(): boolean;\n\n    isImmediatePropagationStopped(): boolean;\n\n    isMapEventAllowed(): boolean;\n\n    isPropagationStopped(): boolean;\n\n    preventDefault(): boolean;\n\n    stopImmediatePropagation(): boolean;\n\n    stopPropagation(): boolean;\n  }\n\n  class DomEvent<OriginalEvent = {}, TargetGeometry = {}>\n    implements IDomEvent<OriginalEvent, TargetGeometry>\n  {\n    constructor(originalEvent: DomEvent, type?: object);\n\n    originalEvent: {\n      domEvent: {\n        originalEvent: OriginalEvent;\n      };\n      target: {\n        geometry?: TargetGeometry | undefined;\n      };\n    };\n\n    allowMapEvent(): void;\n\n    callMethod(name: string): void;\n\n    get<T extends OriginalEvent, K extends keyof T = keyof T>(name: K): T[K];\n    get(name: string): any;\n\n    getSourceEvent(): IDomEvent<OriginalEvent, TargetGeometry>;\n\n    isDefaultPrevented(): boolean;\n\n    isImmediatePropagationStopped(): boolean;\n\n    isMapEventAllowed(): boolean;\n\n    isPropagationStopped(): boolean;\n\n    preventDefault(): boolean;\n\n    stopImmediatePropagation(): boolean;\n\n    stopPropagation(): boolean;\n  }\n\n  class GeoObject<T = IGeometry, TargetGeometry = {}> implements IGeoObject<T> {\n    constructor(feature?: IGeoObjectFeature, options?: IGeoObjectOptions);\n\n    geometry: T | null;\n\n    balloon: geoObject.Balloon;\n\n    editor: IGeometryEditor;\n\n    hint: geoObject.Hint;\n\n    events: event.Manager<TargetGeometry>;\n\n    options: option.Manager;\n\n    properties: data.Manager;\n\n    state: data.Manager;\n\n    getOverlay(): Promise<IOverlay | null>;\n\n    getOverlaySync(): IOverlay | null;\n\n    getParent(): null | IControlParent;\n\n    setParent(parent: IControlParent): this;\n\n    getMap(): Map;\n  }\n\n  interface IGeoObjectFeature {\n    geometry?: IGeometry | IGeometryJson;\n    properties?: IDataManager | object;\n  }\n\n  interface IGeoObjectOptions\n    extends IBalloonOptionsWithBalloonPrefix,\n      IHintOptionsWithHintPrefix,\n      ICircleOptions {\n    iconCaptionMaxWidth?: number;\n    iconColor?: string;\n    iconContentLayout?: string | IClassConstructor<ILayout>;\n    iconContentOffset?: number[];\n    iconContentPadding?: number[];\n    iconContentSize?: number[];\n    iconImageClipRect?: number[][];\n    iconImageHref?: string;\n    iconImageOffset?: number[];\n    iconImageShape?: IShape | null;\n    iconImageSize?: number[];\n    iconLayout?: string | IClassConstructor<ILayout>;\n    iconMaxHeight?: number;\n    iconMaxWidth?: number;\n    iconOffset?: number[];\n    iconShadow?: boolean;\n    iconShadowImageClipRect?: number[][];\n    iconShadowImageHref?: string;\n    iconShadowImageOffset?: number[];\n    iconShadowImageSize?: number[];\n    iconShadowLayout?: string | IClassConstructor<ILayout>;\n    iconShadowOffset?: number[];\n    lineStringOverlay?: OverlayKey;\n    pointOverlay?: OverlayKey;\n    polygonOverlay?: OverlayKey;\n    preset?: PresetKey | undefined;\n    rectangleOverlay?: OverlayKey;\n    setMapCursorInDragging?: boolean;\n\n    [key: string]: any;\n  }\n\n  class GeoObjectCollection implements IGeoObject, IGeoObjectCollection {\n    constructor(\n      feature?: {\n        children?: IGeoObject[];\n        geometry?: IGeometry | object;\n        properties?: IDataManager | object;\n      },\n      options?: object,\n    );\n\n    geometry: IGeometry | null;\n\n    properties: IDataManager;\n\n    state: IDataManager;\n\n    events: IEventManager;\n\n    options: IOptionManager;\n\n    getOverlay(): Promise<IOverlay | null>;\n\n    getOverlaySync(): IOverlay | null;\n\n    getParent(): null | IControlParent;\n\n    setParent(parent: IControlParent): this;\n\n    getMap(): Map;\n\n    add(child: IGeoObject, index?: number): this;\n\n    each(callback: (object: IGeoObject) => void, context?: object): void;\n\n    get(index: number): IGeoObject;\n\n    getBounds(): number[][] | null;\n\n    getIterator(): IIterator;\n\n    getLength(): number;\n\n    getPixelBounds(): number[][] | null;\n\n    indexOf(object: IGeoObject): number;\n\n    remove(child: IGeoObject): this;\n\n    removeAll(): this;\n\n    set(index: number, child: IGeoObject): this;\n\n    splice(index: number, length: number): this;\n\n    toArray(): IGeoObject[];\n  }\n\n  interface ILayerOptions {\n    brightness?: number;\n    notFoundTile?: string | null;\n    pane?: IPane | string;\n    projection?: any;\n    tileSize?: number[][];\n    tileTransparent?: boolean;\n    zIndex?: number;\n  }\n\n  class Layer implements ILayer, IParentOnMap, IPositioningContext {\n    constructor(\n      tileUrlTemplate: string | ((tileNumber: number[], tileZoom: number) => string),\n      options?: ILayerOptions,\n    );\n\n    events: IEventManager;\n\n    options: IOptionManager;\n\n    clientPixelsToNumber(clientPixelPoint: number, tileZoom: number): number[];\n\n    fromClientPixels(clientPixelPoint: number[]): number[];\n\n    getBrightness?(): number;\n\n    getCopyrights?(coords: number[], zoom: number): Promise<Array<string | HTMLElement>>;\n\n    getMap(): Map;\n\n    getPane(): IPane;\n\n    getParent(): null | IControlParent;\n\n    getTileSize(zoom: number): number[];\n\n    getTileStatus(): { readyTileNumber: number; totalTileNumber: number };\n\n    getTileUrl(tileNumber: number[], tileZoom: number): string | null;\n\n    getTileUrlTemplate(): string | any;\n\n    getZoom(): number;\n\n    getZoomRange?(point: number[]): Promise<number[]>;\n\n    numberToClientBounds(tileNumber: number[], tileZoom: number): number[][];\n\n    restrict(num: number[], tileZoom: number): number[] | null;\n\n    setParent(parent: IControlParent): this;\n\n    setTileUrlTemplate(tileUrlTemplate: string | any): void;\n\n    toClientPixels(globalPixelPoint: number[]): number[];\n\n    update(updateBounds: any): void;\n\n    getAlias(): string;\n\n    getElement(): HTMLElement;\n  }\n\n  type IHint = IPopup<IHint>;\n\n  interface IHintOptions {\n    closeTimeout?: number;\n    contentLayout?: IClassConstructor<ILayout> | string;\n    fitPane?: boolean;\n    holdByMouse?: boolean;\n    interactivityModel?: InteractivityModelKey;\n    layout?: IClassConstructor<ILayout> | string;\n    offset?: number[];\n    openTimeout?: number;\n    pane?: string;\n    zIndex?: number;\n  }\n\n  interface IHintOptionsWithHintPrefix {\n    hintCloseTimeout?: number;\n    hintContentLayout?: IClassConstructor<ILayout> | string;\n    hintFitPane?: boolean;\n    hintHoldByMouse?: boolean;\n    hintInteractivityModel?: InteractivityModelKey;\n    hintLayout?: IClassConstructor<ILayout> | string;\n    hintOffset?: number[];\n    hintOpenTimeout?: number;\n    hintPane?: string;\n    hintZIndex?: number;\n  }\n\n  class Hint extends Popup<Hint> implements IHint {\n    constructor(map: Map, options?: IHintOptions);\n  }\n\n  class Map implements IDomEventEmitter {\n    constructor(parentElement: HTMLElement | string, state: IMapState, options?: IMapOptions);\n\n    action: map.action.Manager;\n\n    balloon: map.Balloon;\n\n    behaviors: map.behavior.Manager;\n\n    container: map.Container;\n\n    controls: control.Manager;\n\n    converter: map.Converter;\n\n    copyrights: map.Copyrights;\n\n    cursors: util.cursor.Manager;\n\n    events: event.Manager;\n\n    geoObjects: map.GeoObjects;\n\n    hint: map.Hint;\n\n    layers: map.layer.Manager;\n\n    margin: map.margin.Manager;\n\n    options: option.Manager;\n\n    panes: map.pane.Manager;\n\n    zoomRange: map.ZoomRange;\n\n    destroy(): void;\n\n    getBounds(options?: IMapMarginOptions): number[][];\n\n    getCenter(options?: IMapMarginOptions): number[];\n\n    getGlobalPixelCenter(options?: IMapMarginOptions): number[];\n\n    getPanoramaManager(): Promise<panorama.Manager>;\n\n    getType(): string | MapType;\n\n    getZoom(): number;\n\n    panTo(center: number[] | object[], options?: IMapPanOptions): this;\n\n    setBounds(bounds: number[][], options?: IMapBoundsOptions): this;\n\n    setCenter(center: number[], zoom?: number, options?: IMapPositionOptions): this;\n\n    setGlobalPixelCenter(\n      globalPixelCenter: number[],\n      zoom?: number,\n      options?: IMapPositionOptions,\n    ): this;\n\n    setType(type: string | MapType, options?: IMapCheckZoomRangeOptions): this;\n\n    setZoom(zoom: number, options?: IMapZoomOptions): this;\n  }\n\n  class MapEvent<OriginalEvent = {}, TargetGeometry = {}> extends Event<\n    OriginalEvent,\n    TargetGeometry\n  > {\n    get(name: string): any;\n    get(name: 'coords' | 'globalPixels' | 'pagePixels' | 'clientPixels'): [number, number];\n    get(name: 'domEvent'): DomEvent<OriginalEvent, TargetGeometry> | undefined;\n  }\n\n  interface IMapMarginOptions {\n    useMapMargin?: boolean;\n  }\n\n  interface IMapCheckZoomRangeOptions {\n    checkZoomRange?: boolean;\n  }\n\n  interface IMapZoomOptions extends IMapMarginOptions, IMapCheckZoomRangeOptions {\n    duration?: number;\n  }\n\n  interface IMapPositionOptions extends IMapZoomOptions {\n    timingFunction?: string;\n  }\n\n  interface IMapBoundsOptions extends IMapPositionOptions {\n    preciseZoom?: boolean;\n    zoomMargin?: number[][] | number[];\n  }\n\n  interface IMapPanOptions extends IMapPositionOptions {\n    delay?: number;\n    flying?: boolean;\n    safe?: boolean;\n  }\n\n  class MapType {\n    constructor(name: string, layers: Array<IClassConstructor<Layer> | string>);\n  }\n\n  interface IMapState {\n    behaviors?: string[];\n    bounds?: number[][];\n    center?: number[];\n    controls?: ControlKey[];\n    margin?: number | number[];\n    type?: 'yandex#map' | 'yandex#satellite' | 'yandex#hybrid' | MapType;\n    zoom?: number;\n  }\n\n  interface IMapOptions {\n    autoFitToViewport?: 'none' | 'ifNull' | 'always';\n    avoidFractionalZoom?: boolean;\n    exitFullscreenByEsc?: boolean;\n    fullscreenZIndex?: number;\n    mapAutoFocus?: boolean;\n    maxAnimationZoomDifference?: number;\n    maxZoom?: number;\n    minZoom?: number;\n    nativeFullscreen?: boolean;\n    projection?: IProjection;\n    restrictMapArea?: boolean | number[][] | undefined;\n    suppressMapOpenBlock?: boolean;\n    suppressObsoleteBrowserNotifier?: boolean;\n    yandexMapAutoSwitch?: boolean;\n    yandexMapDisablePoiInteractivity?: boolean;\n\n    copyrightLogoVisible?: boolean;\n    copyrightProvidersVisible?: boolean;\n    copyrightUaVisible?: boolean;\n  }\n\n  class Placemark extends GeoObject<IPointGeometry, geometry.Point> {\n    constructor(\n      geometry: number[] | object | IPointGeometry,\n      properties?: IPlacemarkProperties | IDataManager,\n      options?: IPlacemarkOptions,\n    );\n  }\n\n  interface IPlacemarkProperties {\n    iconContent?: string;\n    iconCaption?: string;\n    hintContent?: string;\n    balloonContent?: string;\n    balloonContentHeader?: string;\n    balloonContentBody?: string;\n    balloonContentFooter?: string;\n    [key: string]: any;\n  }\n\n  interface IPlacemarkOptions\n    extends layout.IImageOptionsWithIconPrefix,\n      layout.IImageWithContentOptionsWithIconPrefix,\n      layout.IPieChartOptionsWithIconPrefix,\n      IBalloonOptionsWithBalloonPrefix,\n      IHintOptionsWithHintPrefix {\n    cursor?: string;\n    draggable?: boolean;\n    hasBalloon?: boolean;\n    hasHint?: boolean;\n    hideIconOnBalloonOpen?: boolean;\n    iconColor?: string | undefined;\n    iconLayout?: IClassConstructor<ILayout> | IconLayoutKey | undefined;\n    iconOffset?: number[];\n    iconShape?: IGeometryJson | null;\n    interactiveZIndex?: boolean;\n    interactivityModel?: InteractivityModelKey | undefined;\n    openBalloonOnClick?: boolean;\n    openEmptyBalloon?: boolean;\n    openEmptyHint?: boolean;\n    openHintOnHover?: boolean;\n    pane?: string;\n    pointOverlay?: string;\n    preset?: PresetKey | undefined;\n    syncOverlayInit?: boolean;\n    useMapMarginInDragging?: boolean;\n    visible?: boolean;\n    zIndex?: number;\n    zIndexActive?: number;\n    zIndexDrag?: number;\n    zIndexHover?: number;\n\n    [key: string]: any;\n  }\n\n  class Polygon extends GeoObject<IPolygonGeometry> {\n    constructor(\n      geometry: number[][][] | object | IPolygonGeometry,\n      properties?: object | IDataManager,\n      options?: IPolygonOptions,\n    );\n  }\n\n  interface IPolygonOptions {\n    cursor?: string;\n    draggable?: boolean;\n    fill?: boolean;\n    fillColor?: string;\n    fillImageHref?: string;\n    fillMethod?: 'stretch' | 'tile';\n    fillOpacity?: number;\n    hasBalloon?: boolean;\n    hasHint?: boolean;\n    interactiveZIndex?: boolean;\n    interactivityModel?: InteractivityModelKey | undefined;\n    opacity?: number;\n    openBalloonOnClick?: boolean;\n    openEmptyBalloon?: boolean;\n    openEmptyHint?: boolean;\n    openHintOnHover?: boolean;\n    outline?: boolean;\n    pane?: string;\n    polygonOverlay?: string;\n    strokeColor?: string | string[];\n    strokeOpacity?: number | number[];\n    strokeStyle?: string | string[] | object | object[];\n    strokeWidth?: number | number[];\n    syncOverlayInit?: boolean;\n    useMapMarginInDragging?: boolean;\n    visible?: boolean;\n    zIndex?: number;\n    zIndexActive?: number;\n    zIndexDrag?: number;\n    zIndexHover?: number;\n  }\n\n  class Polyline extends GeoObject<ILineStringGeometry> {\n    constructor(\n      geometry: number[][] | object | ILineStringGeometry,\n      properties?: object | IDataManager,\n      options?: IPolylineOptions,\n    );\n  }\n\n  interface IPolylineOptions {\n    cursor?: string;\n    draggable?: boolean;\n    hasBalloon?: boolean;\n    hasHint?: boolean;\n    interactiveZIndex?: boolean;\n    interactivityModel?: InteractivityModelKey | undefined;\n    lineStringOverlay?: () => object | string;\n    opacity?: number;\n    openBalloonOnClick?: boolean;\n    openEmptyBalloon?: boolean;\n    openEmptyHint?: boolean;\n    openHintOnHover?: boolean;\n    pane?: string;\n    strokeColor?: string | string[];\n    strokeOpacity?: number | number[];\n    strokeStyle?: string | string[] | object | object[];\n    strokeWidth?: number | number[];\n    syncOverlayInit?: boolean;\n    useMapMarginInDragging?: boolean;\n    visible?: boolean;\n    zIndex?: number;\n    zIndexActive?: number;\n    zIndexDrag?: number;\n    zIndexHover?: number;\n  }\n\n  class Popup<T> implements IPopup<T> {\n    constructor(map: Map, options?: IPopupOptions);\n\n    options: IOptionManager;\n\n    events: IEventManager;\n\n    close(force?: boolean): Promise<T>;\n\n    getData(): object;\n\n    getOverlay(): Promise<IOverlay>;\n\n    getOverlaySync(): IOverlay;\n\n    getPosition(): number[];\n\n    isOpen(): boolean;\n\n    open(position: number[], data: object | string | HTMLElement): Promise<T>;\n\n    setData(data: object | string | HTMLElement): Promise<T>;\n\n    setPosition(position: number[]): Promise<T>;\n  }\n\n  interface IPopupOptions {\n    closeTimeout?: number;\n    interactivityModel?: InteractivityModelKey;\n    openTimeout?: number;\n    pane?: IPane | string;\n    projection?: IProjection;\n    zIndex?: number;\n  }\n\n  function ready(\n    successCallback?: () => any | IReadyObject,\n    errorCallback?: () => any,\n    context?: object,\n  ): Promise<void>;\n\n  interface IReadyObject {\n    require?: string[];\n    context?: object;\n\n    successCallback?(): void;\n\n    errorCallback?(): void;\n  }\n\n  interface IRectangleProperties {\n    hintContent?: string;\n    balloonContent?: string;\n    balloonContentHeader?: string;\n    balloonContentBody?: string;\n    balloonContentFooter?: string;\n  }\n\n  interface IRectangleOptions extends IBalloonOptionsWithBalloonPrefix, IHintOptionsWithHintPrefix {\n    cursor?: string;\n    draggable?: boolean;\n    fill?: boolean;\n    fillColor?: string;\n    fillImageHref?: string;\n    fillMethod?: string;\n    fillOpacity?: number;\n    hasBalloon?: boolean;\n    hasHint?: boolean;\n    interactiveZIndex?: boolean;\n    interactivityModel?: InteractivityModelKey;\n    opacity?: number;\n    openBalloonOnClick?: boolean;\n    openEmptyBalloon?: boolean;\n    openEmptyHint?: boolean;\n    openHintOnHover?: boolean;\n    outline?: boolean;\n    pane?: string;\n    rectangleOverlay?:\n      | OverlayKey\n      | ((\n      geometry: IPixelCircleGeometry,\n      data: IDataManager | object,\n      options: object,\n    ) => vow.Promise);\n    strokeColor?: string | string[];\n    strokeOpacity?: number | number[];\n    strokeStyle?: string | string[] | object | object[];\n    strokeWidth?: number | number[];\n    syncOverlayInit?: boolean;\n    useMapMarginInDragging?: boolean;\n    visible?: boolean;\n    zIndex?: number;\n    zIndexActive?: number;\n    zIndexDrag?: number;\n    zIndexHover?: number;\n\n    [key: string]: any;\n  }\n\n  interface IRectangleGeometryAccess extends IFreezable {\n    contains(position: number[]): boolean;\n\n    getClosest(anchorPosition: number[]): object;\n\n    getCoordinates(): number[][];\n\n    setCoordinates(coordinates: number[][]): IRectangleGeometryAccess;\n  }\n\n  interface IRectangleGeometry extends IGeometry, IRectangleGeometryAccess {\n    getType(): string;\n  }\n\n  class Rectangle extends GeoObject<ILineStringGeometry> {\n    constructor(\n      geometry: number[][] | object | IRectangleGeometry,\n      properties?: IRectangleProperties | IDataManager,\n      options?: IRectangleOptions,\n    );\n  }\n\n  namespace regions {\n    function load(\n      region: string,\n      options?: {\n        disputedBorders?: string;\n        lang?: string;\n        quality?: number;\n      },\n    ): vow.Promise;\n  }\n\n  namespace templateLayoutFactory {\n    function createClass<O extends {} = {}, S extends {} = {}>(\n      template: string,\n      overrides?: O,\n      staticMethods?: S,\n    ): IClassConstructor<layout.templateBased.Base & O & S>;\n  }\n\n  type ResolveCallbackFunction = (\n    provide: (module: any, error?: any) => void,\n    ...depends: any[]\n  ) => void;\n\n  interface IRatioMap {\n    [key: string]: string;\n  }\n\n  namespace util {\n    class AsyncStorage extends Storage {\n      define(\n        key: string,\n        depends: string[],\n        resolveCallback: ResolveCallbackFunction,\n        context?: object,\n      ): this;\n\n      define(key: string, resolveCallback: ResolveCallbackFunction, context?: object): this;\n\n      isDefined(key: string): boolean;\n\n      require(\n        keys: string | string[],\n        successCallback?: (...args: any[]) => void,\n        errorCallback?: (error: any) => void,\n        context?: object,\n      ): vow.Promise;\n    }\n\n    function augment(ChildClass: any, ParentClass: any, override: object): any;\n\n    function bind(callback: any, context: object): any;\n\n    const bounds: {\n      areIntersecting(\n        bounds1: number[][],\n        bounds2: number[][],\n        projection?: typeof ymaps.projection.wgs84Mercator,\n      ): boolean;\n\n      containsBounds(\n        outer: number[][],\n        inner: number[][],\n        projection?: typeof ymaps.projection.wgs84Mercator,\n      ): boolean;\n\n      containsPoint(\n        bounds: number[][],\n        point: number[],\n        projection?: typeof ymaps.projection.wgs84Mercator,\n      ): boolean;\n\n      fromBounds(\n        sourceBounds: number[][],\n        projection?: typeof ymaps.projection.wgs84Mercator,\n      ): number[][];\n\n      fromGlobalPixelBounds(\n        pixelBounds: number[][],\n        zoom: number,\n        projection?: typeof ymaps.projection.wgs84Mercator,\n      ): number[][];\n\n      fromPoints(\n        points: number[][],\n        projection?: typeof ymaps.projection.wgs84Mercator,\n      ): number[][];\n\n      getCenter(bounds: number[][], projection?: typeof ymaps.projection.wgs84Mercator): number[];\n\n      getCenterAndZoom(\n        bounds: number[][],\n        containerSize: number[],\n        projection?: typeof ymaps.projection.wgs84Mercator,\n        params?: {\n          inscribe?: boolean;\n          margin?: number | number[];\n          preciseZoom?: boolean;\n        },\n      ): object;\n\n      getIntersections(\n        bounds1: number[][],\n        bounds2: number[][],\n        projection?: typeof ymaps.projection.wgs84Mercator,\n      ): number[][][];\n\n      getSize(bounds: number[][], projection?: typeof ymaps.projection.wgs84Mercator): number[];\n\n      toGlobalPixelBounds(\n        geoBounds: number[][],\n        zoom: number[],\n        projection?: typeof ymaps.projection.wgs84Mercator,\n      ): number[][];\n    };\n\n    namespace cursor {\n      class Accessor {\n        constructor(key: string);\n\n        getKey(): string;\n\n        remove(): void;\n\n        setKey(key: string): void;\n      }\n\n      class Manager {\n        constructor(element: HTMLElement);\n\n        events: event.Manager;\n\n        push(key: string): Accessor;\n      }\n    }\n\n    function defineClass(constructor: any, parentClass?: any, override?: object): any;\n\n    function defineClass(constructor: any, override?: object): any;\n\n    class Dragger implements IEventEmitter {\n      constructor(params?: {\n        autoStartElement?: HTMLElement | IDomEventEmitter;\n        byRightButton?: boolean;\n        tremor?: number;\n      });\n\n      events: IEventManager;\n\n      destroy(): void;\n\n      isDragging(): boolean;\n\n      start(event: IDomEvent): void;\n\n      stop(): void;\n    }\n\n    function extend(target: object, ...source: object[]): object;\n\n    const hd: {\n      getPixelRatio(): number;\n\n      selectRatio(hash: IRatioMap): number;\n\n      selectValue(hash: object | IRatioMap): object;\n    };\n\n    namespace math {\n      function areEqual(first: number[], second: number[], diff?: number): boolean;\n\n      function cycleRestrict(value: number, min: number, max: number): number;\n\n      function restrict(value: number, min: number, max: number): number;\n    }\n\n    const pixelBounds: {\n      areIntersecting(bounds1: number[][], bounds2: number[][]): boolean;\n\n      containsBounds(outer: number[][], inner: number[][]): boolean;\n\n      containsPoint(bounds: number[][], point: number[][]): boolean;\n\n      fromBounds(sourceBounds: number[][]): number[][];\n\n      fromPoints(points: number[][]): number[][];\n\n      getCenter(bounds: number[][]): number[];\n\n      getIntersection(bounds1: number[][], bounds2: number[][]): number[][] | null;\n\n      getSize(bounds: number[][]): number[];\n    };\n\n    function requireCenterAndZoom(\n      mapType: string | MapType | map.ZoomRange,\n      bounds: number[][],\n      containerSize: number[],\n      params?: {\n        inscribe?: boolean;\n        margin?: number | number[];\n        preciseZoom?: boolean;\n      },\n    ): vow.Promise;\n\n    class Storage {\n      add(key: string, object: object): this;\n\n      get(key: string | object): object | string;\n\n      remove(key: string): object;\n    }\n  }\n\n  namespace vow {\n    class Deferred {\n      promise(): Promise;\n\n      reject(reason: object): void;\n\n      resolve(value: object): void;\n    }\n\n    class Promise {\n      constructor(resolver?: () => void);\n\n      done(\n        onFulfilled?: (...args: any[]) => void,\n        onRejected?: (err?: Error | any) => void,\n        onProgress?: (...args: any[]) => void,\n        ctx?: object,\n      ): void;\n\n      spread(\n        onFulfilled?: (...args: any[]) => void,\n        onRejected?: (err?: Error | any) => void,\n        ctx?: object,\n      ): Promise;\n\n      then(\n        onFulfilled?: (...args: any[]) => void,\n        onRejected?: (err?: Error | any) => void,\n        onProgress?: (...args: any[]) => void,\n        ctx?: object,\n      ): Promise;\n\n      valueOf(): object;\n    }\n\n    function resolve(value: any): any;\n  }\n\n  /* Interfaces */\n\n  interface IBaloon<T> extends IPopup<T>, ICustomizable, IChild<T>, IFreezable {\n    autoPan(): Promise<T>;\n  }\n\n  interface IBalloonManager<T> extends IPopupManager<T> {\n    autoPan(): Promise<T>;\n  }\n\n  interface IBaseGeometry extends IEventEmitter {\n    getBounds(): number[][] | null;\n\n    getType(): string;\n  }\n\n  interface IBaseLineStringGeometry extends IBaseGeometry, ILineStringGeometryAccess {}\n\n  interface IBasePointGeometry extends IBaseGeometry, IPointGeometryAccess {}\n\n  interface IBasePolygonGeometry extends IBaseGeometry, IPolygonGeometryAccess {}\n\n  interface IBehavior extends IChildOnMap, ICustomizable {\n    disable(): void;\n\n    enable(): void;\n\n    isEnabled(): boolean;\n  }\n\n  interface IChild<T> extends IEventEmitter {\n    getParent(): object | null;\n\n    setParent(parent: object | null): this;\n  }\n\n  type IChildOnMap = IChild<IControlParent>;\n\n  interface ICircleGeometry extends ICircleGeometryAccess, IGeometry {}\n\n  interface ICircleGeometryAccess extends IFreezable {\n    contains(position: number[]): boolean;\n\n    getClosest(anchorPosition: number[]): object;\n\n    getCoordinates(): number[] | null;\n\n    getRadius(): number;\n\n    setCoordinates(coordinates: number[] | null): ICircleGeometryAccess;\n\n    setRadius(radius: number): ICircleGeometryAccess;\n  }\n\n  interface ICollection extends IEventEmitter {\n    add(object: object): this;\n\n    getIterator(): IIterator;\n\n    remove(object: object): this;\n  }\n\n  interface IContainerPane extends IPane, IPositioningContext {}\n\n  type IControl = IChildOnMap;\n\n  interface IControlParent extends IParentOnMap {\n    getChildElement(child: IControl): Promise<HTMLElement>;\n  }\n\n  interface ICoordSystem {\n    getDistance(point1: number[], point2: number[]): number;\n\n    solveDirectProblem(startPoint: number[], direction: number[], distance: number): object;\n\n    solveInverseProblem(\n      startPoint: number[],\n      endPoint: number[],\n      reverseDirection?: boolean,\n    ): object;\n  }\n\n  type ICopyrightsAccessor = ICopyrightsProvider;\n\n  interface ICopyrightsProvider extends IEventEmitter {\n    getCopyrights(coords: number[], zoom: number): Promise<Array<string | HTMLElement>>;\n\n    remove(): void;\n\n    setCopyrights(copyrights: string | HTMLElement | Array<string | HTMLElement>): void;\n  }\n\n  interface ICustomizable extends IEventEmitter {\n    options: IOptionManager;\n  }\n\n  interface IDataManager extends IEventEmitter {\n    set(key: object | string, value?: object | number | string | null | undefined): this;\n\n    get(path: string, defaultValue?: object): object;\n  }\n\n  type IDomEventEmitter = IEventEmitter;\n\n  interface IEvent<OriginalEvent = {}, TargetGeometry = {}> {\n    originalEvent: {\n      domEvent: {\n        originalEvent: OriginalEvent;\n      };\n      target: {\n        geometry?: TargetGeometry | undefined;\n      };\n    };\n\n    allowMapEvent(): void;\n\n    callMethod(name: string): void;\n\n    get<T extends OriginalEvent, K extends keyof T = keyof T>(name: K): T[K];\n\n    get(name: 'type'): string;\n\n    get(name: 'objectId'): string | undefined;\n\n    get(name: 'newZoom' | 'oldZoom'): number | undefined;\n\n    get(name: string): any;\n\n    getSourceEvent(): IEvent<OriginalEvent, TargetGeometry> | null;\n\n    isDefaultPrevented(): boolean;\n\n    isImmediatePropagationStopped(): boolean;\n\n    isMapEventAllowed(): boolean;\n\n    isPropagationStopped(): boolean;\n\n    preventDefault(): boolean;\n\n    stopImmediatePropagation(): boolean;\n\n    stopPropagation(): boolean;\n  }\n\n  interface IDomEvent<OriginalEvent = {}, TargetGeometry = {}>\n    extends IEvent<OriginalEvent, TargetGeometry> {\n    getSourceEvent(): IDomEvent<OriginalEvent, TargetGeometry>;\n  }\n\n  interface IEventController {\n    onStartListening?(events: IEventManager, type: string): void;\n\n    onStopListening?(events: IEventManager, type: string): void;\n  }\n\n  interface IEventEmitter {\n    events: IEventManager;\n  }\n\n  interface IEventGroup {\n    add<K extends keyof EventMap>(\n      types: K,\n      callback: (event: EventMap[K] | IEvent) => void,\n      context?: object,\n      priority?: number,\n    ): this;\n\n    add(\n      types: string[][] | string[] | string,\n      callback: (event: object | IEvent) => void,\n      context?: object,\n      priority?: number,\n    ): this;\n\n    remove(\n      types: string[][] | string[] | string,\n      callback: (event: object | IEvent) => void,\n      context?: object,\n      priority?: number,\n    ): this;\n\n    removeAll(): this;\n  }\n\n  interface IEventManager<TargetGeometry = {}> extends IEventTrigger {\n    add<K extends keyof EventMap>(\n      types: K,\n      callback: (event: IEvent<EventMap[K], TargetGeometry>) => void,\n      context?: object,\n      priority?: number,\n    ): this;\n\n    add(\n      types: string[][] | string[] | string,\n      callback: (event: IEvent) => void,\n      context?: object,\n      priority?: number,\n    ): this;\n\n    getParent(): object | null;\n\n    group(): IEventGroup;\n\n    remove(\n      types: string[][] | string[] | string,\n      callback: (event: object | IEvent) => void,\n      context?: object,\n      priority?: number,\n    ): this;\n\n    setParent(parent: object | null): this;\n  }\n\n  interface IEventPane extends IDomEventEmitter, IPane {}\n\n  interface IEventTrigger {\n    fire(type: string, eventObject?: object | IEvent): this;\n  }\n\n  interface IEventWorkflowController extends IEventController {\n    onAfterEventFiring?(events: IEventManager, type: string, event?: IEvent): void;\n\n    onBeforeEventFiring?(events: IEventManager, type: string, event?: IEvent): void;\n  }\n\n  type IExpandableControlLayout = ILayout;\n\n  interface IFreezable {\n    events: IEventManager;\n\n    freeze(): IFreezable;\n\n    isFrozen(): boolean;\n\n    unfreeze(): IFreezable;\n  }\n\n  interface IGeocodeProvider {\n    geocode(\n      request: string,\n      options?: {\n        boundedBy?: number[][];\n        results?: number;\n        skip?: number;\n        strictBounds?: boolean;\n      },\n    ): Promise<object>;\n\n    suggest(\n      request: string,\n      options?: {\n        boundedBy?: number[][];\n        results?: number;\n        strictBounds?: boolean;\n      },\n    ): Promise<object>;\n  }\n\n  function geocode(request: string | number[], options?: IGeocodeOptions): Promise<object>;\n\n  interface IGeocodeOptions {\n    boundedBy?: number[][];\n    json?: boolean;\n    kind?: string;\n    provider?: IGeocodeProvider | string;\n    results?: number;\n    searchCoordOrder?: string;\n    skip?: number;\n    strictBounds?: boolean;\n  }\n\n  interface IGeometry extends IBaseGeometry, ICustomizable {\n    getMap(): Map | null;\n\n    getPixelGeometry(options?: object): IPixelGeometry;\n\n    setMap(map: Map): void;\n  }\n\n  interface IGeometryEditor extends ICustomizable, IEventEmitter {\n    geometry: IGeometry;\n    state: IDataManager;\n\n    startEditing(): void;\n\n    stopEditing(): void;\n  }\n\n  interface IGeometryEditorChildModel extends IGeometryEditorModel {\n    editor: IGeometryEditor;\n    geometry: IBaseGeometry;\n\n    getParent(): IGeometryEditorModel;\n\n    setPixels(pixels: number[]): void;\n  }\n\n  interface IGeometryEditorModel extends IEventEmitter {\n    destroy(): void;\n\n    getPixels(): number[];\n  }\n\n  type IGeometryEditorRootModel = IGeometryEditorModel;\n\n  interface IGeometryJson {\n    type: string;\n    coordinates: number[] | number[][] | number[][][];\n    fillRule?: 'evenOdd' | 'nonZero';\n    radius?: number;\n    [key: string]: any;\n  }\n\n  interface IGeoObject<T = IGeometry>\n    extends IChildOnMap,\n      ICustomizable,\n      IDomEventEmitter,\n      IParentOnMap {\n    geometry: T | null;\n\n    properties: IDataManager;\n\n    state: IDataManager;\n\n    balloon?: geoObject.Balloon;\n\n    getOverlay(): Promise<IOverlay | null>;\n\n    getOverlaySync(): IOverlay | null;\n  }\n\n  interface IGeoObjectCollection extends ICustomizable, IEventEmitter, IParentOnMap {\n    add(child: IGeoObject, index?: number): this;\n\n    each(callback: (object: IGeoObject) => void, context?: object): void;\n\n    get(index: number): IGeoObject;\n\n    getBounds(): number[][] | null;\n\n    getIterator(): IIterator;\n\n    getLength(): number;\n\n    getPixelBounds(): number[][] | null;\n\n    indexOf(object: IGeoObject): number;\n\n    remove(child: IGeoObject): this;\n\n    removeAll(): this;\n\n    set(index: number, child: IGeoObject): this;\n\n    splice(index: number, length: number): this;\n  }\n\n  interface IGeoObjectSequence extends ICustomizable, IEventEmitter, IParentOnMap {\n    each(callback: (geoObject: IGeoObject) => void, context?: object): void;\n\n    get(index: number): IGeoObject;\n\n    getBounds(): number[][] | null;\n\n    getIterator(): IIterator;\n\n    getLength(): number;\n\n    getPixelBounds(): number[][] | null;\n\n    indexOf(geoObject: IGeoObject): number;\n  }\n\n  interface IPromiseProvider {\n    then(onResolve: () => void, onReject: (err?: Error | any) => void): this;\n  }\n\n  type IGeoQuerySource =\n    | IGeoObject\n    | IGeoObject[]\n    | ICollection\n    | ICollection[]\n    | IPromiseProvider\n    | vow.Promise\n    | GeoQueryResult\n    | string\n    | object\n    | object[];\n\n  class GeoQueryResult implements IPromiseProvider {\n    constructor(source: IGeoQuerySource);\n\n    then(onResolve: () => void, onReject?: (err?: Error | any) => void, context?: object): this;\n\n    add(source: IGeoQuerySource): this;\n\n    addEvents(events: string | string[], callback: () => void, context?: object): this;\n\n    addTo(collection: ICollection): this;\n\n    addToMap(map: Map): this;\n\n    applyBoundsToMap(\n      map: Map,\n      options?: {\n        checkZoomRange?: boolean;\n        duration?: number;\n        preciseZoom?: boolean;\n        timingFUnction?: string;\n        useMapMargin?: boolean;\n        zoomMargin?: number | number[];\n      },\n    ): this;\n\n    clusterize(options?: IClustererOptions): Clusterer;\n\n    each(callback: (e: any) => void, context?: object): this;\n\n    get(index: number): IGeoObject;\n\n    getBounds(): number[][] | null;\n\n    getCenter(map?: Map): number[];\n\n    getCentralObject(map: Map): IGeoObject | null;\n\n    getClosestTo(object: IGeoObject | IGeometry | Map | number[] | object | any): IGeoObject | null;\n\n    getExtreme(key: 'top' | 'right' | 'bottom' | 'left'): number;\n\n    getExtremeObject(key: 'top' | 'right' | 'bottom' | 'left'): IGeoObject;\n\n    getGlobalPixelBounds(map: Map): Number[][] | null;\n\n    getGlobalPixelCenter(map: Map): number[];\n\n    getIterator(): IIterator;\n\n    getLength(): number;\n\n    getMaxZoom(map?: Map, options?: { useMapMargin?: boolean }): number;\n\n    getParent(): this | null;\n\n    indexOf(item: IGeoObject | any): number;\n\n    intersect(result: this): this;\n\n    isReady(): boolean;\n\n    map(callback: (e: any) => void, context?: object): this;\n\n    remove(\n      objects: IGeoObject | IGeoObject[] | ICollection | ICollection[] | this | vow.Promise | any,\n    ): this;\n\n    removeEvents(events: string | string[], callback: () => void, context?: object): void;\n\n    removeFrom(collection: ICollection): this;\n\n    removeFromMap(map: Map): this;\n\n    reverse(): this;\n\n    search(condition: string | ((o: object) => boolean)): this;\n\n    searchContaining(\n      object: IGeoObject | IGeometry | Map | number[] | number[][] | object | any,\n    ): this;\n\n    searchInside(object: IGeoObject | IGeometry | Map | any): this;\n\n    searchIntersect(\n      object: IGeoObject | IGeometry | Map | any,\n      options?: { considerOccurance?: boolean },\n    ): this;\n\n    setOptions(key: string | object, value?: any): this;\n\n    setProperties(path: string, value?: any): this;\n\n    slice(begin: number, end?: number): this;\n\n    sort(comparator: string | ((a: any, b: any) => number)): any;\n\n    sortByDistance(\n      object: IGeoObject | IGeometry | Map | number[] | number[][] | object | any,\n    ): this;\n\n    unsetOptions(keys: string | string[]): this;\n\n    unsetProperties(path: string): this;\n  }\n\n  function geoQuery(source: IGeoQuerySource): GeoQueryResult;\n\n  type IHintManager<T> = IPopupManager<T>;\n\n  interface IIterator {\n    getNext(): object | null;\n  }\n\n  interface ILayer extends IChildOnMap, ICustomizable, IEventEmitter {\n    getBrightness?(): number;\n\n    getCopyrights?(coords: number[], zoom: number): Promise<Array<string | HTMLElement>>;\n\n    getZoomRange?(point: number[]): Promise<number[]>;\n  }\n\n  interface ILayout extends IDomEventEmitter {\n    destroy(): void;\n\n    getData(): object;\n\n    getParentElement(): HTMLElement;\n\n    getShape(): IShape | null;\n\n    isEmpty(): boolean;\n\n    setData(data: object): void;\n\n    setParentElement(parent: HTMLElement | null): void;\n  }\n\n  interface ILinearRingGeometryAccess extends IFreezable {\n    contain(position: number): boolean;\n\n    freeze(): IFreezable;\n\n    get(index: number): number[];\n\n    getChildGeometry(index: number): IPointGeometryAccess;\n\n    getClosest(anchorPosition: number[]): object;\n\n    getCoordinates(): number[][];\n\n    getFillRule(): string;\n\n    getLength(): number;\n\n    insert(index: number, coordinates: number[]): ILinearRingGeometryAccess;\n\n    isFrozen(): boolean;\n\n    remove(index: number): number[];\n\n    set(index: number, coordinates: number[]): ILinearRingGeometryAccess;\n\n    setCoordinates(coordinates: number[][]): ILinearRingGeometryAccess;\n\n    setFillRule(fillRule: string): ILinearRingGeometryAccess;\n\n    splice(index: number, number: number): number[][];\n\n    unfreeze(): IFreezable;\n  }\n\n  interface ILineStringGeometry extends IGeometry, ILineStringGeometryAccess {}\n\n  interface ILineStringGeometryAccess extends IFreezable {\n    get(index: number): number[];\n\n    getChildGeometry(index: number): IPointGeometryAccess;\n\n    getClosest(anchorPosition: number[]): object;\n\n    getCoordinates(): number[][];\n\n    getLength(): number;\n\n    insert(index: number, coordinates: number[][]): ILineStringGeometryAccess;\n\n    remove(index: number): number[];\n\n    set(index: number, coordinates: number[]): ILineStringGeometryAccess;\n\n    setCoordinates(coordinates: number[][]): ILineStringGeometryAccess;\n\n    splice(index: number, length: number): number[][];\n  }\n\n  interface IMapAction extends IEventEmitter {\n    begin(mapActionManager: map.action.Manager): void;\n\n    end(): void;\n  }\n\n  interface IMapObjectCollection extends ICollection, ICustomizable, IParentOnMap {}\n\n  interface IMultiRouteModelJson {\n    params?: IMultiRouteParams;\n    referencePoints: IMultiRouteReferencePoint[];\n  }\n\n  interface IMultiRouteParams {\n    avoidTrafficJams?: boolean;\n    boundedBy?: number[][] | null;\n    requestSendInterval?: string | number;\n    results?: number;\n    reverseGeocoding?: boolean;\n    routingMode?: 'auto' | 'masstransit' | 'pedestrian';\n    searchCoordOrder?: string;\n    strictBounds?: boolean;\n    viaIndexes?: number[];\n  }\n\n  type IMultiRouteReferencePoint = string | number[] | geometry.Point;\n\n  interface IOptionManager extends IChild<IOptionManager>, IEventEmitter, IFreezable {\n    get(key: string, defaultValue?: object): any;\n\n    getAll(): object;\n\n    getName(): string;\n\n    getNative(key: string): object;\n\n    resolve(key: string, name?: string): object;\n\n    set(key: object | string, value?: object | number | string | null | undefined): this;\n\n    setName(name: string): void;\n  }\n\n  interface IOverlay extends ICustomizable, IDomEventEmitter {\n    getData(): object;\n\n    getGeometry(): IPixelGeometry;\n\n    getMap(): Map | null;\n\n    getShape(): IShape | null;\n\n    isEmpty(): boolean;\n\n    setData(data: object): void;\n\n    setGeometry(geometry: IPixelGeometry): void;\n\n    setMap(map: Map | null): void;\n  }\n\n  interface IPane extends IEventEmitter {\n    destroy(): void;\n\n    getElement(): HTMLElement;\n\n    getMap(): Map;\n\n    getOverflow(): 'visible' | 'hidden';\n\n    getZIndex(): number;\n  }\n\n  interface IPanorama {\n    getAngularBBox(): number[];\n\n    getConnectionArrows(): IPanoramaConnectionArrow[];\n\n    getConnectionMarkers(): IPanoramaConnectionMarker[];\n\n    getCoordSystem(): ICoordSystem;\n\n    getDefaultDirection(): number[];\n\n    getDefaultSpan(): number[];\n\n    getGraph(): IPanoramaGraph | null;\n\n    getMarkers(): IPanoramaMarker[];\n\n    getName(): string;\n\n    getPosition(): number[];\n\n    getTileLevels(): IPanoramaTileLevel[];\n\n    getTileSize(): number[];\n  }\n\n  interface IPanoramaConnection {\n    getConnectedPanorama(): Promise<IPanorama>;\n  }\n\n  interface IPanoramaConnectionArrow extends IPanoramaConnection {\n    properties: data.Manager;\n\n    getDirection(): number[];\n\n    getPanorama(): IPanorama;\n  }\n\n  interface IPanoramaConnectionMarker extends IPanoramaConnection, IPanoramaMarker {}\n\n  interface IPanoramaGraph {\n    getEdges(): IPanoramaGraphEdge[];\n\n    getNodes(): IPanoramaGraphEdge[];\n\n    getPanorama(): IPanorama;\n  }\n\n  interface IPanoramaGraphEdge {\n    getEndNodes(): IPanoramaGraphNode[];\n  }\n\n  interface IPanoramaGraphNode {\n    getConnectedPanorama(): Promise<IPanorama>;\n  }\n\n  interface IPanoramaMarker {\n    properties: data.Manager;\n\n    getIconSet(): Promise<IPanoramaMarkerIconSet>;\n\n    getPanorama(): IPanorama;\n\n    getPosition(): number[];\n  }\n\n  interface IPanoramaMarkerIcon {\n    image: HTMLCanvasElement | HTMLImageElement;\n    offset: number[];\n  }\n\n  interface IPanoramaMarkerIconSet {\n    default: IPanoramaMarkerIcon | null;\n    expanded: IPanoramaMarkerIcon | null;\n    expandedHovered: IPanoramaMarkerIcon | null;\n    hovered: IPanoramaMarkerIcon | null;\n  }\n\n  interface IPanoramaTileLevel {\n    getImageSize(): number[];\n\n    getTileUrl(x: number, y: number): string;\n  }\n\n  interface IParentOnMap {\n    getMap(): Map;\n  }\n\n  interface IPixelCircleGeometry extends IPixelGeometry {\n    getCoordinates(): number[];\n\n    getRadius(): number;\n  }\n\n  interface IPixelLineStringGeometry extends IPixelGeometry {\n    getClosest(anchorPosition: number[]): object;\n\n    getCoordinates(): number[][];\n\n    getLength(): number;\n  }\n\n  interface IPixelPointGeometry extends IPixelGeometry {\n    getCoordinates(): number[];\n  }\n\n  interface IPixelMultiLineGeometry extends IPixelGeometry {\n    getClosest(anchorPosition: number[]): object;\n\n    getCoordinates(): number[][][];\n\n    getLength(): number;\n  }\n\n  interface IPixelMultiPolygonGeometry extends IPixelGeometry {\n    contains(position: number[]): boolean;\n\n    getClosest(anchorPosition: number[]): object;\n\n    getCoordinates(): number[][][][];\n\n    getFillRule(): 'evenOdd' | 'nonZero';\n\n    getLength(): number;\n  }\n\n  interface IPixelPolygonGeometry extends IPixelGeometry {\n    contains(position: number[]): boolean;\n\n    getClosest(anchorPosition: number[]): object;\n\n    getCoordinates(): number[][][];\n\n    getFillRule(): 'evenOdd' | 'nonZero';\n\n    getLength(): number;\n  }\n\n  interface IPixelRectangleGeometry extends IPixelGeometry {\n    getClosest(anchorPosition: number[]): object;\n\n    getCoordinates(): number[][];\n  }\n\n  interface IPixelGeometry extends IBaseGeometry {\n    equals(geometry: IPixelGeometry): boolean;\n\n    getMetaData(): object;\n\n    scale(factor: number): IPixelGeometry;\n\n    shift(offset: number[]): IPixelGeometry;\n  }\n\n  interface IPointGeometry extends IGeometry, IPointGeometryAccess {}\n\n  interface IPointGeometryAccess {\n    getCoordinates(): number[] | null;\n\n    setCoordinates(coordinates: number[] | null): this;\n  }\n\n  interface IPolygonGeometry extends IGeometry, IPolygonGeometryAccess {}\n\n  interface IPolygonGeometryAccess extends IFreezable {\n    contains(position: number[]): boolean;\n\n    get(index: number): number[][];\n\n    getChildGeometry(index: number): ILinearRingGeometryAccess;\n\n    getClosest(anchorPosition: number[]): object;\n\n    getCoordinates(): number[][][];\n\n    getFillRule(): string;\n\n    getLength(): number;\n\n    insert(index: number, path: number[][]): IPolygonGeometryAccess;\n\n    remove(index: number): ILinearRingGeometryAccess;\n\n    set(index: number, path: number[][]): IPolygonGeometryAccess;\n\n    setCoordinates(coordinates: number[][][]): IPolygonGeometryAccess;\n\n    setFillRule(fillRule: string): IPolygonGeometryAccess;\n\n    splice(index: number, number: number): ILinearRingGeometryAccess[];\n  }\n\n  interface IPopup<T> extends ICustomizable, IEventEmitter {\n    close(force?: boolean): Promise<T>;\n\n    getData(): object;\n\n    getOverlay(): Promise<IOverlay>;\n\n    getOverlaySync(): IOverlay;\n\n    getPosition(): number[];\n\n    isOpen(): boolean;\n\n    open(position: number[], data: object | string | HTMLElement): Promise<T>;\n\n    setData(data: object | string | HTMLElement): Promise<T>;\n\n    setPosition(position: number[]): Promise<T>;\n  }\n\n  interface IPopupManager<T> extends IEventEmitter {\n    close(force?: boolean): Promise<T>;\n\n    destroy(): void;\n\n    getData(): object | null;\n\n    getOptions(): IOptionManager | null;\n\n    getOverlay(): Promise<IOverlay | null>;\n\n    getOverlaySync(): IOverlay | null;\n\n    getPosition(): number[] | null;\n\n    isOpen(): boolean;\n\n    open(position?: number[], data?: object | string | HTMLElement, options?: object): Promise<T>;\n\n    setData(data: object | string | HTMLElement): Promise<T>;\n\n    setOptions(options: object): Promise<T>;\n\n    setPosition(position: number[]): Promise<T>;\n  }\n\n  interface IPositioningContext {\n    fromClientPixels(clientPixelPoint: number[]): number[];\n\n    getZoom(): number;\n\n    toClientPixels(globalPixelPoint: number[]): number[];\n  }\n\n  interface IProjection {\n    fromGlobalPixels(globalPixelPoint: number[], zoom: number): number[];\n\n    getCoordSystem(): ICoordSystem;\n\n    isCycled(): boolean[];\n\n    toGlobalPixels(coordPoint: number[], zoom: number): number[];\n  }\n\n  interface IRoutePanel {\n    options: IOptionManager;\n\n    state: IDataManager;\n\n    enable(): void;\n\n    geolocate(name: string): Promise<{ geoObjects: GeoObjectCollection }>;\n\n    getRoute(): multiRouter.MultiRoute;\n\n    getRouteAsync(): Promise<multiRouter.MultiRoute>;\n\n    isEnable(): boolean;\n\n    switchPoints(): void;\n  }\n\n  type ISearchControlLayout = IExpandableControlLayout;\n\n  interface ISelectableControl extends IControl {\n    deselect(): void;\n\n    disable(): void;\n\n    enable(): void;\n\n    isEnabled(): boolean;\n\n    isSelected(): boolean;\n\n    select(): void;\n  }\n\n  type ISelectableControlLayout = ILayout;\n\n  interface IShape {\n    contains(position: number[]): boolean;\n\n    equals(shape: IShape): boolean;\n\n    getBounds(): number[][] | null;\n\n    getGeometry(): IPixelGeometry;\n\n    getType(): string;\n\n    scale(factor: number): IShape;\n\n    shift(offset: number[]): IShape;\n  }\n\n  class Monitor {\n    constructor(dataManager: IDataManager | IOptionManager);\n\n    add(\n      name: string[] | string,\n      changeCallback: (event: object | IEvent) => void,\n      context?: any,\n      params?: any,\n    ): Monitor;\n\n    forceChange(): Monitor;\n\n    get(name: string): any;\n\n    remove(name: string): Monitor;\n\n    removeAll(): Monitor;\n  }\n\n  class ObjectManager implements ICustomizable, IEventEmitter, IGeoObject, IParentOnMap {\n    constructor(options: IObjectManagerOptions);\n\n    clusters: objectManager.ClusterCollection;\n\n    events: IEventManager;\n\n    geometry: IGeometry | null;\n\n    objects: objectManager.ObjectCollection;\n\n    options: IOptionManager;\n\n    properties: IDataManager;\n\n    state: IDataManager;\n\n    add(objects: object | object[] | string): this;\n\n    getBounds(): number[][] | null;\n\n    getFilter(): string | ((object: object | string) => boolean) | null;\n\n    getMap(): Map;\n\n    getObjectState(id: any): {\n      found: boolean;\n      isShown: boolean;\n      cluster?: object;\n      isClustered: boolean;\n      isFilteredOut: boolean;\n    };\n\n    getOverlay(): Promise<IOverlay | null>;\n\n    getOverlaySync(): IOverlay | null;\n\n    getParent(): IParentOnMap | null;\n\n    getPixelBounds(): number[][] | null;\n\n    remove(objects: object | object[] | string): this;\n\n    removeAll(): this;\n\n    setFilter(filterFunction: (object: object | string) => boolean): void;\n\n    setParent(parent: IParentOnMap | null): this;\n  }\n\n  interface IObjectManagerOptions\n    extends IClustererOptionsInject,\n      IClusterPlacemarkOptionsWithClusterPrefix {\n    clusterize?: boolean | undefined;\n    syncOverlayInit?: boolean | undefined;\n    viewportMargin?: number[] | number | undefined;\n  }\n\n  namespace objectManager {\n    class Balloon implements Omit<IBalloonManager<map.Balloon>, 'isOpen' | 'open'> {\n      constructor(collection: object);\n\n      events: IEventManager;\n\n      autoPan(): Promise<ymaps.Balloon>;\n\n      close(force?: boolean): Promise<ymaps.Balloon>;\n\n      destroy(): void;\n\n      getData(): object | null;\n\n      getOptions(): IOptionManager | null;\n\n      getOverlay(): Promise<IOverlay | null>;\n\n      getOverlaySync(): IOverlay | null;\n\n      getPosition(): number[] | null;\n\n      isOpen(id: any): boolean;\n\n      open(objectId: any, anchorPixelPosition?: boolean): Promise<ymaps.Balloon>;\n\n      setData(objectData: object | string | HTMLElement): Promise<ymaps.Balloon>;\n\n      setOptions(options: object): Promise<ymaps.Balloon>;\n\n      setPosition(position: number[]): Promise<ymaps.Balloon>;\n    }\n\n    class ClusterCollection implements ICustomizable, IEventEmitter {\n      balloon: objectManager.Balloon;\n\n      events: IEventManager;\n\n      hint: objectManager.Hint;\n\n      options: option.Manager;\n\n      overlays: objectManager.OverlayCollection;\n\n      state: data.Manager;\n\n      each(callback: (cluster: object) => void, context?: object): void;\n\n      getAll(): object[];\n\n      getById(id: string): object | null;\n\n      getIterator(): IIterator;\n\n      getLength(): number;\n\n      getObjectManager(): ObjectManager;\n\n      setClusterOptions(objectId: string, options: object): this;\n    }\n\n    class Hint implements Omit<IHintManager<map.Hint>, 'isOpen' | 'open'> {\n      constructor(collection: object);\n\n      events: IEventManager;\n\n      close(force?: boolean): Promise<map.Hint>;\n\n      destroy(): void;\n\n      getData(): object | null;\n\n      getOptions(): IOptionManager | null;\n\n      getOverlay(): Promise<IOverlay | null>;\n\n      getOverlaySync(): IOverlay | null;\n\n      getPosition(): number[] | null;\n\n      isOpen(id: any): boolean;\n\n      open(objectId: any, position?: number[]): Promise<map.Hint>;\n\n      setData(data: object | string | HTMLElement): Promise<map.Hint>;\n\n      setOptions(options: object): Promise<map.Hint>;\n\n      setPosition(position: number[]): Promise<map.Hint>;\n    }\n\n    class ObjectCollection implements ICollection, ICustomizable {\n      balloon: objectManager.Balloon;\n\n      events: IEventManager;\n\n      hint: objectManager.Hint;\n\n      options: option.Manager;\n\n      overlays: objectManager.OverlayCollection;\n\n      add(object: object): this;\n\n      each(callback: (object: object) => void, context?: object): void;\n\n      getAll(): object[];\n\n      getById(id: number): object | null;\n\n      getIterator(): IIterator;\n\n      getLength(): number;\n\n      getObjectManager(): ObjectManager;\n\n      remove(data: object | object[] | string): this;\n\n      removeAll(): objectManager.ObjectCollection;\n\n      setObjectOptions(objectId: any, options: object): ObjectCollection;\n    }\n\n    class OverlayCollection implements ICustomizable, IEventEmitter {\n      events: IEventManager;\n\n      options: IOptionManager;\n\n      each(callback: (overlay: IOverlay) => void, context?: object): void;\n\n      getAll(): object[];\n\n      getById(id: number): IOverlay | null;\n\n      getId(overlay: IOverlay): number | null;\n\n      getIterator(): IIterator;\n\n      getLength(): number;\n    }\n  }\n\n  namespace modules {\n    function define(\n      module: string,\n      depends?: string[],\n      resolveCallback?: ResolveCallbackFunction,\n      context?: object,\n    ): typeof modules;\n\n    function define(\n      module: string,\n      resolveCallback?: ResolveCallbackFunction,\n      context?: object,\n    ): typeof modules;\n\n    function isDefined(module: string): boolean;\n\n    function require(\n      modules: string | string[],\n      successCallback?: (...args: any[]) => void,\n      errorCallback?: (error: any) => void,\n      context?: object,\n    ): vow.Promise;\n  }\n\n  interface IHotspotObjectSource extends ICustomizable, IEventEmitter {\n    cancelLastRequest(): void;\n\n    requestObjects(\n      layer: hotspot.Layer,\n      tileNumber: number[],\n      zoom: number,\n      callback: () => void,\n    ): void;\n  }\n\n  interface IHotspotLayerOptions\n    extends IBalloonOptionsWithBalloonPrefix,\n      IHintOptionsWithHintPrefix {\n    cursor?: string;\n    dontChangeCursor?: boolean;\n    hasBalloon?: boolean;\n    hasHint?: boolean;\n    interactivityModel?: InteractivityModelKey;\n    openBalloonOnClick?: boolean;\n    openEmptyBalloon?: boolean;\n    openEmptyHint?: boolean;\n    openHintOnHover?: boolean;\n    pane?: IEventPane;\n    showEmptyBalloon?: boolean;\n    zIndex?: number;\n  }\n\n  interface IHotspotLayerObject extends ICustomizable, IDomEventEmitter {\n    getGeometry(): object;\n\n    getHotspot(): IHotspot;\n\n    getId(): number;\n\n    getProperties(): object;\n\n    setGeometry(geometry: object): void;\n\n    setId(id: number): void;\n\n    setProperties(properties: object): void;\n  }\n\n  namespace hotspot {\n    namespace layer {\n      namespace addon {\n        const balloon: {\n          get(layer: hotspot.Layer): IPopupManager<Balloon>;\n        };\n\n        const hint: {\n          get(layer: hotspot.Layer): IPopupManager<Hint>;\n        };\n      }\n\n      class Balloon implements IBalloonManager<Balloon> {\n        constructor(hotspotLayer: object);\n\n        events: IEventManager;\n\n        autoPan(): Promise<Balloon>;\n\n        close(force?: boolean): Promise<Balloon>;\n\n        destroy(): void;\n\n        getData(): object | null;\n\n        getOptions(): IOptionManager | null;\n\n        getOverlay(): Promise<IOverlay | null>;\n\n        getOverlaySync(): IOverlay | null;\n\n        getPosition(): number[] | null;\n\n        isOpen(): boolean;\n\n        open(position?: number[], data?: object, options?: object): Promise<Balloon>;\n\n        setData(data: object | string | HTMLElement): Promise<Balloon>;\n\n        setOptions(options: object): Promise<Balloon>;\n\n        setPosition(position: number[]): Promise<Balloon>;\n      }\n\n      class Hint implements IHintManager<Hint> {\n        constructor(hotspotLayer: object);\n\n        events: IEventManager;\n\n        close(force?: boolean): Promise<Hint>;\n\n        destroy(): void;\n\n        getData(): object | null;\n\n        getOptions(): IOptionManager | null;\n\n        getOverlay(): Promise<IOverlay | null>;\n\n        getOverlaySync(): IOverlay | null;\n\n        getPosition(): number[] | null;\n\n        isOpen(): boolean;\n\n        open(position?: number[], data?: object, options?: object): Promise<Hint>;\n\n        setData(data: object | string | HTMLElement): Promise<Hint>;\n\n        setOptions(options: object): Promise<Hint>;\n\n        setPosition(position: number[]): Promise<Hint>;\n      }\n\n      class Object implements IHotspotLayerObject {\n        constructor(shape: IShape, feature: object, options: object);\n\n        events: IEventManager;\n\n        options: IOptionManager;\n\n        getGeometry(): object;\n\n        getHotspot(): IHotspot;\n\n        getId(): number;\n\n        getProperties(): object;\n\n        setGeometry(geometry: object): void;\n\n        setId(id: number): void;\n\n        setProperties(properties: object): void;\n      }\n    }\n\n    class Layer implements IChildOnMap, ICustomizable {\n      constructor(objectSource: IHotspotObjectSource, options: IHotspotLayerOptions);\n\n      balloon: hotspot.layer.Balloon;\n\n      events: IEventManager;\n\n      hint: hotspot.layer.Balloon;\n\n      options: IOptionManager;\n\n      getMap(): Map;\n\n      getObjectInPosition(coords: number[]): vow.Promise;\n\n      getObjectsInPosition(coords: number[]): vow.Promise;\n\n      getObjectSource(): ObjectSource;\n\n      getParent(): IParentOnMap | null;\n\n      setParent(parent: IParentOnMap | null): this;\n\n      update(): void;\n    }\n\n    class ObjectSource implements IHotspotObjectSource {\n      constructor(\n        tileUrlTemplate: string | ((tileNumber: number[], tileZoom: number) => string),\n        keyTemplate?: string | ((tileNumber: number[], tileZoom: number) => string),\n        options?: {\n          bounds?: number[][];\n          maxZoom?: number;\n          minZoom?: number;\n          noCache?: boolean;\n        },\n      );\n\n      events: IEventManager;\n\n      options: IOptionManager;\n\n      cancelLastRequest(): void;\n\n      getKey(tileNumber: number[], zoom: number): string;\n\n      getKeyTemplate(): string;\n\n      getTileUrl(tileNumber: number[], zoom: number): string;\n\n      getTileUrlTemplate(): string;\n\n      parseResponse(\n        layer: hotspot.Layer,\n        res: object,\n        callback: () => void,\n        tileNumber: number[],\n        zoom: number,\n      ): void;\n\n      requestObjects(\n        layer: hotspot.Layer,\n        tileNumber: number[],\n        zoom: number,\n        callback: () => void,\n      ): void;\n\n      restrict(layer: hotspot.Layer, tileNumber: number[], zoom: number): boolean;\n\n      setKeyTemplate(template: string): void;\n\n      setTileUrlTemplate(template: string): void;\n    }\n  }\n\n  class Hotspot implements IHotspot {\n    constructor(shape: IShape, zIndex?: number);\n\n    events: IEventManager;\n  }\n\n  interface IHotspot extends IDomEventEmitter {\n    events: IEventManager;\n  }\n\n  namespace geolocation {\n    interface IGeolocationOptions {\n      autoReverseGeocode?: boolean;\n      mapStateAutoApply?: boolean;\n      provider?: string;\n      timeout?: number;\n      useMapMargin?: boolean;\n    }\n\n    function get(options?: IGeolocationOptions): Promise<{ geoObjects: GeoObjectCollection }>;\n  }\n\n  interface ISuggestProvider {\n    suggest(\n      request: string,\n      options?: {\n        boundedBy?: number[][];\n        results?: number;\n      },\n    ): Promise<object>;\n  }\n\n  interface ISuggestViewOptions {\n    boundedBy?: number[][];\n    container?: HTMLElement;\n    layout?: string | any;\n    offset?: number[];\n    provider?: string | ISuggestProvider;\n    results?: number;\n    width?: number;\n    zIndex?: number;\n  }\n\n  class SuggestView implements ICustomizable, IEventEmitter {\n    constructor(element: HTMLElement | string, options?: ISuggestViewOptions);\n\n    events: IEventManager;\n\n    options: IOptionManager;\n\n    state: data.Manager;\n\n    destroy(): void;\n  }\n\n  interface ITile extends IEventEmitter {\n    events: IEventManager;\n\n    destroy(): void;\n\n    isReady(): boolean;\n  }\n\n  interface ICanvasTile extends ITile {\n    events: IEventManager;\n\n    destroy(): void;\n\n    isReady(): boolean;\n\n    renderAt(context: any, canvasSize: number[], bounds: number[][], animate?: boolean): void;\n  }\n\n  interface IDomTile extends ITile {\n    events: IEventManager;\n\n    destroy(): void;\n\n    isReady(): boolean;\n\n    renderAt(context: HTMLElement, clientBounds: number[][], animate?: boolean): void;\n  }\n\n  namespace layer {\n    const storage: util.Storage;\n\n    namespace tile {\n      interface ITileOptions {\n        notFoundTile?: string | null;\n        tileAnimationDuration?: number;\n      }\n\n      interface ITileRenderOptions {\n        tileNumber?: number[];\n        tileZoom?: number;\n      }\n\n      class CanvasTile implements ICanvasTile {\n        constructor(url: string, options?: ITileOptions, renderOptions?: ITileRenderOptions);\n\n        events: IEventManager;\n\n        destroy(): void;\n\n        isReady(): boolean;\n\n        renderAt(context: any, canvasSize: number[], bounds: number[][], animate?: boolean): void;\n      }\n\n      class DomTile implements IDomTile {\n        constructor(url: string, options?: ITileOptions, renderOptions?: ITileRenderOptions);\n\n        events: IEventManager;\n\n        destroy(): void;\n\n        isReady(): boolean;\n\n        renderAt(context: HTMLElement, clientBounds: number[][], animate?: boolean): void;\n      }\n    }\n\n    namespace tileContainer {\n      interface CanvasContainerOptions {\n        notFoundTile?: string | null;\n        tileClass?: ICanvasTile;\n        tileTransparent?: boolean;\n      }\n\n      class CanvasContainer implements IChildOnMap {\n        constructor(layer: ILayer, options?: CanvasContainerOptions);\n\n        events: IEventManager;\n\n        getMap(): Map;\n\n        getParent(): object | null;\n\n        getTile(tileNumber: number[], tileZoom: number, priority: number): ICanvasTile;\n\n        setParent(parent: object | null): this;\n      }\n\n      interface DomContainerOptions {\n        notFoundTile?: string | null;\n        tileClass?: IDomTile;\n        tileTransparent?: boolean;\n      }\n\n      class DomContainer implements IChildOnMap {\n        constructor(layer: ILayer, options?: DomContainerOptions);\n\n        events: IEventManager;\n\n        getMap(): Map;\n\n        getParent(): object | null;\n\n        getTile(tileNumber: number[], tileZoom: number, priority: number): ICanvasTile;\n\n        setParent(parent: object | null): this;\n      }\n    }\n  }\n\n  namespace mapType {\n    const storage: util.Storage;\n  }\n\n  namespace projection {\n    class Cartesian implements IProjection {\n      constructor(bounds: number[][], cycled?: boolean[], scale?: number | number[]);\n\n      fromGlobalPixels(globalPixelPoint: number[], zoom: number): number[];\n\n      getCoordSystem(): ICoordSystem;\n\n      isCycled(): boolean[];\n\n      toGlobalPixels(coordPoint: number[], zoom: number): number[];\n    }\n\n    const sphericalMercator: IProjection;\n\n    const wgs84Mercator: IProjection;\n  }\n}\n"]}